{"name": "test_config_common", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "@allure.description(\"ÊµãËØïhttp://calapi.51jirili.com/config/commonÊé•Âè£\")\n    @allure.testcase(\"http://calapi.51jirili.com/config/common\", \"ÊµãËØïÁî®‰æãÂú∞ÂùÄ üëá\")\n    def test_config_common():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"ÂºÄÂßãÊâßË°åËÑöÊú¨%s:\\n\", def_name)\n        opera_url = server_ip('realse') + yamldict['test_operation_list']['url']\n        opera_result = RequestsHandler().get_Req(url=opera_url, params='',\n                                                 headers=yamldict['test_operation_list'][\"headers\"])\n        sting_response = opera_result.content.decode()\n>       json_response = dict_style(sting_response)\n\ntest_case\\test_demo.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\Retrun_Response.py:12: in dict_style\n    json_response = json.loads(data)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:357: in loads\n    return _default_decoder.decode(s)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000002326B3B9BB0>\ns = '<html>\\n<head>\\n<meta http-equiv=\"Content-Type\" content=\"textml;charset=UTF-8\" />\\n   <style>body{background-color:#F...50px;top:50%;left:50%;\" id=\"mainFrame\" src=\"\" frameborder=\"0\" scrolling=\"no\"></iframe>\\n    </body>\\n      </html>\\n\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\decoder.py:355: JSONDecodeError"}, "description": "ÊµãËØïhttp://calapi.51jirili.com/config/commonÊé•Âè£", "attachments": [{"name": "log", "source": "5a241948-0dba-4bf2-891f-5cbe1540bbcf-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "786cb0f1-ab8d-40bb-8c99-22b796fb567f-attachment.txt", "type": "text/plain"}], "start": 1596084828325, "stop": 1596084828341, "uuid": "d242e9ef-e305-4ee8-9da9-f67a4c0eebee", "historyId": "6f43e2a7d069f0d046c81b4816617031", "testCaseId": "f7fdff488d39cc0fbb2d4ec4a2f11edb", "fullName": "test_case.test_demo#test_config_common", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_demo"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "9776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_demo"}], "links": [{"type": "test_case", "url": "http://calapi.51jirili.com/config/common", "name": "ÊµãËØïÁî®‰æãÂú∞ÂùÄ üëá"}]}
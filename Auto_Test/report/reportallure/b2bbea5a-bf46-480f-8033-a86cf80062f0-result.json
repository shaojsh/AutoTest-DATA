{"name": "test_loginOn", "status": "broken", "statusDetails": {"message": "TypeError: Object of type loginOn is not JSON serializable", "trace": "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"æµ‹è¯• http://10.10.128.152:10053/ loginOn\")\n    @allure.testcase(\"http://10.10.128.152:10053/\", \"loginOn ðŸ‘‡\")\n    def test_loginOn():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"å¼€å§‹æ‰§è¡Œè„šæœ¬%s:\\n\", def_name)\n    \n        WebDriver.maximize_window()\n        WebDriver.get(\"http://10.10.128.152:10052/account/login?v=1596002392301\")\n        test_Assert.assert_text_ui('sucess', 'sucess')\n>       WebDriver.find_element_by_css_selector(loginOn.act_xpath).send_keys(\"17621198933\")\n\ntest_flow\\text_demo\\test_uidemo.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:598: in find_element_by_css_selector\n    return self.find_element(by=By.CSS_SELECTOR, value=css_selector)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:319: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:372: in execute\n    data = utils.dump_json(params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\utils.py:33: in dump_json\n    return json.dumps(json_struct)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000002CDE226AAC0>\no = <loginOn.act_xpath: '#userName'>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type loginOn is not JSON serializable\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:179: TypeError"}, "description": "æµ‹è¯• http://10.10.128.152:10053/ loginOn", "attachments": [{"name": "log", "source": "29806cfe-5f9d-45e2-b10e-a3379b81d9ac-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "798384ea-d43f-467e-961f-3fc7f16ec128-attachment.txt", "type": "text/plain"}], "start": 1596507948957, "stop": 1596507953568, "uuid": "a422d851-99e1-4e8a-b084-65ca7bec044a", "historyId": "8106da1260c84ffc1c35190ec50b1cd8", "testCaseId": "2182093af936b8e48639f4dcd8caea52", "fullName": "test_flow.text_demo.test_uidemo#test_loginOn", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=1)"}, {"name": "parentSuite", "value": "test_flow.text_demo"}, {"name": "suite", "value": "test_uidemo"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "8256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.text_demo.test_uidemo"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/", "name": "loginOn ðŸ‘‡"}]}
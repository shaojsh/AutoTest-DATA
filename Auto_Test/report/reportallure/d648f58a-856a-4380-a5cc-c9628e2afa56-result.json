{"name": "test_companyRegister", "status": "broken", "statusDetails": {"message": "NameError: name 'evn' is not defined", "trace": "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"ÊµãËØï http://10.10.128.152:10053/user/register ‰∏≠Â∞èÂæÆ‰ºÅ‰∏öÊ≥®ÂÜåÊµÅÁ®ã\")\n    @allure.testcase(\"http://10.10.128.152:10053/user/register\", \"Ê≥®ÂÜå üëá\")\n    def test_companyRegister():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"ÂºÄÂßãÊâßË°åËÑöÊú¨%s:\\n\", def_name)\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_ui_register)\n            # db‰∏≠Ê∏ÖÈô§Â∑≤Ê≥®ÂÜåÁöÑË¥¶Êà∑\n            deleteInforMobile()\n            logger.info(\"ÂØπÂ∑≤Ê≥®ÂÜåÁöÑË¥¶Êà∑ËøõË°åÂà†Èô§Êìç‰Ωú\")\n            sleep(1)\n            waitUntilClick(driver, loginOn.btn_agree_css.value)\n            driver.find_element_by_css_selector(loginOn.btn_agree_css.value).click()\n    \n            waitUntilDisplay(driver, loginOn.input_act_css.value)\n            driver.find_element_by_css_selector(loginOn.input_act_css.value).send_keys(act)\n            driver.find_element_by_css_selector(loginOn.input_pwd_css.value).send_keys(pwd)\n            driver.find_element_by_css_selector(loginOn.input_conPwd_css.value).send_keys(pwd)\n            waitUntilClick(driver, loginOn.btn_phoneCode_css.value)\n            sleep(2)\n            flushDb()\n            driver.find_element_by_css_selector(loginOn.btn_phoneCode_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"regMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n    \n            driver.find_element_by_css_selector(loginOn.input_phoneCode_css.value).send_keys(message.strip().strip('\"'))\n            waitUntilClick(driver, loginOn.btn_agreeReg.value)\n            driver.find_element_by_css_selector(loginOn.btn_agreeReg.value).click()\n    \n            title = driver.title\n            test_Assert.assert_text_ui(title, '‰∏≠Â∞èÂæÆ‰ºÅ‰∏öÈáëËûçÊúçÂä°ËÅöÂêàÂπ≥Âè∞')\n            logger.info(\"Ê≥®ÂÜåÊàêÂäüÔºåËøîÂõûÂà∞ÁôªÈôÜÈ°µÈù¢\")\n            sleep(1)\n            driver.quit()\n        else:\n            deleteInforMobile()  # Âà†Èô§‰∏™‰∫∫‰ø°ÊÅØ\n            startWeinxin()\n            while True:\n                if mobileDriver(text='‰∏ÄÈîÆÂæÆ‰ø°ÊéàÊùÉÁôªÂΩï').exists():\n                    waiteForClick(mobileDriver(text='‰∏ÄÈîÆÂæÆ‰ø°ÊéàÊùÉÁôªÂΩï'))\n                    break\n                else:\n                    continue\n            waiteForClick(mobileDriver(text='ÂÖÅËÆ∏'))\n            waiteForClick(mobileDriver(text='ÊéàÊùÉÊâãÊú∫Âè∑'))\n            waiteForClick(mobileDriver(text='ÂÖÅËÆ∏'))\n    \n            logger.info(\"PC Á´ØËøõË°åÂØÜÁ†Å‰øÆÊîπ\")\n            companyPassForgetForward(act)\n            logger.info(\"Â∞èÁ®ãÂ∫è‰∏™‰∫∫ÂÆûÂêçËÆ§ËØÅÈ°µÈù¢\")\n    \n            # ‰∏ä‰º†Ë∫´‰ªΩËØÅÊ≠£ÂèçÈù¢\n            waiteForClick(mobileDriver(text='ËØ∑‰∏ä‰º†Ë∫´‰ªΩËØÅÂ§¥ÂÉèÈù¢'))\n            waiteForClick(mobileDriver(text='ÊâÄÊúâÂõæÁâá'))\n            waiteForClick(mobileDriver(text='Ëá™Âä®ÂåñÊµãËØï‰∏ìÁî®Áõ∏ÂÜå'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                3].child(\n                \"com.tencent.mm:id/dm0\").click()\n            waiteForClick(mobileDriver(text='ÂÆåÊàê'))\n            sleep(2)\n            waiteForClick(mobileDriver(text='ËØ∑‰∏ä‰º†Ë∫´‰ªΩËØÅÂõΩÂæΩÈù¢'))\n            waiteForClick(mobileDriver(text='ÊâÄÊúâÂõæÁâá'))\n            waiteForClick(mobileDriver(text='Ëá™Âä®ÂåñÊµãËØï‰∏ìÁî®Áõ∏ÂÜå'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                2].child(\n                \"com.tencent.mm:id/dm8\").click()\n            waiteForClick(mobileDriver(text='ÂÆåÊàê'))\n            waiteForClick(mobileDriver(text='Êèê‰∫§ËÆ§ËØÅ'))\n    \n            # Ê¥ª‰ΩìËÆ§ËØÅÊ¨∫ËØàÊÄßÊ†°È™å\n>           getVerification(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_login.py:130: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'https://zero-api-uat.chengtay.com/v1/account/login', act = '17082238021'\n\n    def getVerification(url, act):\n        r0 = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r0.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n        print('token‰∏∫Ôºö' + data)\n    \n        r = RedisSqldata()\n        keys = r.keys()\n        pipe = r.pipeline()\n        pipe_size = 100000\n        len = 0\n        key_list = []\n        print(r.pipeline())\n    \n        for key in keys:\n            key_list.append(key)\n            pipe.get(key)\n            if len < pipe_size:\n                len += 1\n            else:\n                for (k, v) in zip(key_list, pipe.execute()):\n                    len = 0\n                    key_list = []\n    \n        for (k, v) in zip(key_list, pipe.execute()):\n            k = bytes.decode(k)\n            v = bytes.decode(v)\n            if k == 'token:' + data:\n                v = v.replace('null', '\\\"' + 'ok' + '\\\"')\n                dic = eval(v)\n                userId = dic.get('userId')\n                break\n    \n        while 1:\n            value1 = r.get('live:check:' + str(userId))\n            if value1 is None:\n                continue\n            else:\n                break\n        strValue1 = bytes.decode(value1).replace('\"', \"\")\n>       if evn != 'SIT':\nE       NameError: name 'evn' is not defined\n\ncommon\\dbLink.py:266: NameError"}, "description": "ÊµãËØï http://10.10.128.152:10053/user/register ‰∏≠Â∞èÂæÆ‰ºÅ‰∏öÊ≥®ÂÜåÊµÅÁ®ã", "attachments": [{"name": "log", "source": "22ee29b8-7478-4e65-aebf-c2c46ea5cbc0-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "d623b3dc-f21f-4591-8181-33dbe9465cb5-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "061e19d1-4e43-4bc8-9c0e-efaf05030879-attachment.txt", "type": "text/plain"}], "start": 1602665552033, "stop": 1602665613458, "uuid": "e79b9f2d-3e77-4f66-953f-f1b561bf3a60", "historyId": "dd0646a5c1a798e47c4f25747509dea9", "testCaseId": "1fe2bac8daa9cfa6b5ae5069ce9a9205", "fullName": "test_flow.test_Authentication.test_login#test_companyRegister", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=1)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "15732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_login"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/user/register", "name": "Ê≥®ÂÜå üëá"}]}
{"name": "test_infoReg", "status": "broken", "statusDetails": {"message": "TypeError: waitUntilClick_xpath() missing 1 required positional argument: 'ByXpath'", "trace": "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 👇\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(\"http://10.10.128.152:10053/user/login\")\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n    \n        name = yamldict['test_personalInfoRegList']['name']\n        idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n        driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n        driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n>       BaseFunction.waitUntilClick_xpath(path_personalInfoReg.btn_phoneNum_xpath.value)\nE       TypeError: waitUntilClick_xpath() missing 1 required positional argument: 'ByXpath'\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:57: TypeError"}, "description": "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证", "attachments": [{"name": "log", "source": "6e6f22ac-a12e-4d6e-894b-3cc321a7d312-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "fdf15a58-10b9-41eb-bb6c-6169887900c8-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "be410597-568a-4476-84c4-3e8f8e6c169f-attachment.txt", "type": "text/plain"}], "start": 1596682952680, "stop": 1596682969845, "uuid": "5867396f-7183-4abd-8afe-5b7664c24f97", "historyId": "28dda5313ff182aeade3becf47df4372", "testCaseId": "9cbf013f05cb6ad37536fb98be3bcb37", "fullName": "test_flow.test_Authentication.test_personalInfoReg#test_infoReg", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=1)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_personalInfoReg"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "12960-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_personalInfoReg"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/personal/set/certification", "name": "个人实名认证 👇"}]}
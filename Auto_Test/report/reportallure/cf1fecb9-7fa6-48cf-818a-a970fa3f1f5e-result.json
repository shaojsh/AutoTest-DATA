{"name": "test_infoReg", "status": "broken", "statusDetails": {"message": "TypeError: getVerification() takes 0 positional arguments but 2 were given", "trace": "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 👇\")\n    def test_infoReg():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            # 对个人信息企业信息进行删除操作\n            deletePerInforAndComInfor()\n            logger.info(\"对个人信息企业信息进行删除操作\")\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_forward)\n    \n            # 登陆页面\n            login(driver)\n    \n            waitUntilDisplay(driver, loginOn.link_home_css.value)\n            sleep(1)\n            homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n            test_Assert.assert_text_ui(homeText.text, '首页')\n            logger.info(\"进入登陆页面\")\n    \n            waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n            sleep(1)\n            titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n            test_Assert.assert_text_ui(titleText.text, '实名认证')\n            logger.info(\"实名认证画面成功显示\")\n            name = yamldict['test_personalInfoRegList']['name']\n            idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n            driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n            driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n            BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n            flushDb()\n            driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"auMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n            driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n                message.strip().strip('\"'))\n    \n            picture_dir = os.getcwd()\n            pcture_dirOne = '\\\\test_data\\\\picture\\\\id_1.jpg'\n            pcture_dirTwo = '\\\\test_data\\\\picture\\\\id_2.jpg'\n            driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture1_css.value).send_keys(\n                picture_dir + pcture_dirOne)\n            BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture1_css.value)\n            driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture2_css.value).send_keys(\n                picture_dir + pcture_dirTwo)\n            BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture2_css.value)\n            waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n            sleep(1)\n            driver.find_element_by_css_selector(path_personalInfoReg.btn_aut_css.value).click()\n    \n>           getVerification(RequestURL, act)\nE           TypeError: getVerification() takes 0 positional arguments but 2 were given\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:91: TypeError"}, "description": "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证", "attachments": [{"name": "log", "source": "e822da91-30f5-4675-a9fe-85d8073da4f4-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "bb978a8f-5462-4d47-a2ea-ee49d3fee4a8-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "41f4470e-0c12-4f7e-b4a9-7ac9cca25a4d-attachment.txt", "type": "text/plain"}], "start": 1602817598543, "stop": 1602817616047, "uuid": "554c93de-9f2e-4cb9-8b5c-2bb06ba11539", "historyId": "28dda5313ff182aeade3becf47df4372", "testCaseId": "9cbf013f05cb6ad37536fb98be3bcb37", "fullName": "test_flow.test_Authentication.test_personalInfoReg#test_infoReg", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_personalInfoReg"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "12460-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_personalInfoReg"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/personal/set/certification", "name": "个人实名认证 👇"}]}
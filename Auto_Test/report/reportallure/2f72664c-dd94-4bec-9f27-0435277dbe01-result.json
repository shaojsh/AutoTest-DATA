{"name": "test_Tripartite_interaction", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nfrom chrome not reachable\n  (Session info: chrome=87.0.4280.66)", "trace": "@pytest.mark.run(order=-1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"ÊµãËØï http://10.10.128.152:10052/#/account/login ‰∏âÊñπÔºà‰ºÅ‰∏öÔºåÈì∂Ë°åÔºåÂâçÁ´ØÔºâ‰∫§‰∫í\")\n    @allure.testcase(\"http://10.10.128.152:10052/#/account/login\", \"‰∏âÊñπÔºà‰ºÅ‰∏öÔºåÈì∂Ë°åÔºåÂâçÁ´ØÔºâ‰∫§‰∫í üëá\")\n    def test_Tripartite_interaction():\n        def_name = sys._getframe().f_code.co_name\n        logger.info(\"ÂºÄÂßãÊâßË°åËÑöÊú¨%s:\\n\", def_name)\n    \n        # ÂâçÁ´ØË¥¶Êà∑Êéà‰ø°Áî≥ËØ∑\n        if runMode == 'UI':\n            if jenkins:\n                option = webdriver.ChromeOptions()\n                option.add_argument('headless')  # ÊµèËßàÂô®‰∏çÊèê‰æõÂèØËßÜÂåñÈ°µÈù¢\n                option.add_argument('no-sandbox')  # ‰ª•ÊúÄÈ´òÊùÉÈôêËøêË°å\n                option.add_argument('--start-maximized')  # ÊúÄÂ§ßÂåñËøêË°åÔºàÂÖ®Â±èÁ™óÂè£ÔºâËÆæÁΩÆÂÖÉÁ¥†ÂÆö‰ΩçÊØîËæÉÂáÜÁ°Æ\n                option.add_argument('--disable-gpu')  # Ë∞∑Ê≠åÊñáÊ°£ÊèêÂà∞ÈúÄË¶ÅÂä†‰∏äËøô‰∏™Â±ûÊÄßÊù•ËßÑÈÅøbug\n                option.add_argument('--window-size=1920,1080') # ËÆæÁΩÆÊµèËßàÂô®ÂàÜËæ®ÁéáÔºàÁ™óÂè£Â§ßÂ∞èÔºâ\n                driver_forward = webdriver.Chrome(options=option)\n            else:\n>               driver_forward = webdriver.Chrome(executable_path=driverPath)\n\ntest_flow\\test_Tripartite_interaction\\test_Tripartite_interaction.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:81: in __init__\n    desired_capabilities=desired_capabilities)\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:157: in __init__\n    self.start_session(capabilities, browser_profile)\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:252: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001C175E1FC88>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created\\\\nfrom chrome not rea...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772C7084+228]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x772C7054+180]\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created\nE       from chrome not reachable\nE         (Session info: chrome=87.0.4280.66)\n\nD:\\python\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: SessionNotCreatedException"}, "description": "ÊµãËØï http://10.10.128.152:10052/#/account/login ‰∏âÊñπÔºà‰ºÅ‰∏öÔºåÈì∂Ë°åÔºåÂâçÁ´ØÔºâ‰∫§‰∫í", "attachments": [{"name": "log", "source": "f3738da4-4569-4fac-96f4-0fcb8c2da5dc-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "62e685be-769d-446e-941f-ecc8dd708b74-attachment.txt", "type": "text/plain"}], "start": 1633770629398, "stop": 1633770645019, "uuid": "becbddcc-c6ba-486d-8652-8886e497af13", "historyId": "d91e7b4392163e0b46289a9f8b97b16c", "testCaseId": "ff94b3cb02e8ba4f94c9f712dc0dd88c", "fullName": "test_flow.test_Tripartite_interaction.test_Tripartite_interaction#test_Tripartite_interaction", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=-1)"}, {"name": "parentSuite", "value": "test_flow.test_Tripartite_interaction"}, {"name": "suite", "value": "test_Tripartite_interaction"}, {"name": "host", "value": "BF-202011271053"}, {"name": "thread", "value": "15820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Tripartite_interaction.test_Tripartite_interaction"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10052/#/account/login", "name": "‰∏âÊñπÔºà‰ºÅ‰∏öÔºåÈì∂Ë°åÔºåÂâçÁ´ØÔºâ‰∫§‰∫í üëá"}]}
{"name": "test_infoReg", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 👇\")\n    def test_infoReg():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            # 对个人信息企业信息进行删除操作\n            deletePerInforAndComInfor()\n            logger.info(\"对个人信息企业信息进行删除操作\")\n    \n            driver = webdriver.Chrome(executable_path=driverPath)\n            driver.maximize_window()\n            driver.get(url_forward)\n    \n            # 登陆页面\n            login(driver)\n    \n            waitUntilDisplay(driver, loginOn.link_home_css.value)\n            sleep(1)\n            homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n            test_Assert.assert_text_ui(homeText.text, '首页')\n            logger.info(\"进入登陆页面\")\n    \n            # waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n            # sleep(1)\n            # titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n            # test_Assert.assert_text_ui(titleText.text, '实名认证')\n            # logger.info(\"实名认证画面成功显示\")\n            name = yamldict['test_personalInfoRegList']['name']\n            idNum = yamldict['test_personalInfoRegList']['id_card']\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n            # BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n            # flushDb()\n            # driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n            #\n            # while 1:\n            #     message = getPhoneMessage().get(\"auMes\")\n            #     if message is None:\n            #         sleep(0.5)\n            #         continue\n            #     else:\n            #         break\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n            #     message.strip().strip('\"'))\n            BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n            picture_dir = os.getcwd()\n            pcture_dirOne = '\\\\test_data\\\\picture\\\\id_1.jpg'\n            pcture_dirTwo = '\\\\test_data\\\\picture\\\\id_2.jpg'\n            driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture1_css.value).send_keys(\n                picture_dir + pcture_dirOne)\n>           BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture1_css.value)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\BaseFunction.py:21: in waitUntilDisplay\n    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.CSS_SELECTOR, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"960734bcc2ef3e9dba4f63865387ebe5\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000027C61D45940>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "description": "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证", "attachments": [{"name": "log", "source": "80f200d5-32b1-48ea-8e32-49965f4343d3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "c87c7ff3-b5ba-4d87-91bb-fe0ad26287a2-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "bb48d4f0-edfd-4284-85d8-c59c35b50efe-attachment.txt", "type": "text/plain"}], "start": 1605141419191, "stop": 1605141464949, "uuid": "0de75749-e30d-4586-815d-c5d2d0f765a9", "historyId": "28dda5313ff182aeade3becf47df4372", "testCaseId": "9cbf013f05cb6ad37536fb98be3bcb37", "fullName": "test_flow.test_Authentication.test_personalInfoReg#test_infoReg", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_personalInfoReg"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "3688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_personalInfoReg"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/personal/set/certification", "name": "个人实名认证 👇"}]}
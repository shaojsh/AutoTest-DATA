{"name": "test_infoReg", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 👇\")\n    def test_infoReg():\n    \n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(\"http://10.10.128.152:10053/user/login\")\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n>       waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\BaseFunction.py:10: in waitUntilDisplay\n    WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.CSS_SELECTOR, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"eccc488e63728ef036a895e5b2ea936a\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x000001C0E01B82E0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "description": "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证", "attachments": [{"name": "log", "source": "99bb3f1d-67d0-4f9c-8698-b4818f9a360e-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e8a7cadc-7a7e-4128-b30b-a68545a3c45d-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "0be4a3d6-978f-4236-bbd7-e25ec6113fa3-attachment.txt", "type": "text/plain"}], "start": 1596781016291, "stop": 1596781046667, "uuid": "8f029e42-3a1d-4663-8812-ef7914902849", "historyId": "28dda5313ff182aeade3becf47df4372", "testCaseId": "9cbf013f05cb6ad37536fb98be3bcb37", "fullName": "test_flow.test_Authentication.test_personalInfoReg#test_infoReg", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_personalInfoReg"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "3880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_personalInfoReg"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/personal/set/certification", "name": "个人实名认证 👇"}]}
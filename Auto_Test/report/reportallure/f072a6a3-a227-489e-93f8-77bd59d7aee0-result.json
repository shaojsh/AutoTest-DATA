{"name": "test_infoReg", "status": "broken", "statusDetails": {"message": "  File \"<string>\", line 1\n    {\"@class\":\"com.bird.web.sso.ticket.ServerTicket\",\"userId\":\"0kf3pnsfd-0174-748fb578-8a8a0018-020f\",\"tenantId\":\"chengtay-tech\",\"userName\":\"17621198955\",\"realName\": ,\"creationTime\":[\"java.util.Date\",1600159530358],\"lastRefreshTime\":[\"java.util.Date\",1600159530358],\"expireTime\":[\"java.util.Date\",1600181130358],\"appClaims\":{\"@class\":\"java.util.HashMap\"}}\n                                                                                                                                                                      ^\nSyntaxError: invalid syntax", "trace": "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"ÊµãËØï http://10.10.128.152:10053/personal/set/certification ‰∏™‰∫∫ÂÆûÂêçËÆ§ËØÅ\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"‰∏™‰∫∫ÂÆûÂêçËÆ§ËØÅ üëá\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"ÂºÄÂßãÊâßË°åËÑöÊú¨%s:\\n\", def_name)\n    \n        # ÂØπ‰∏™‰∫∫‰ø°ÊÅØ‰ºÅ‰∏ö‰ø°ÊÅØËøõË°åÂà†Èô§Êìç‰Ωú\n        deletePerInforAndComInfor()\n        logger.info(\"ÂØπ‰∏™‰∫∫‰ø°ÊÅØ‰ºÅ‰∏ö‰ø°ÊÅØËøõË°åÂà†Èô§Êìç‰Ωú\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # ÁôªÈôÜÈ°µÈù¢\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        sleep(1)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, 'È¶ñÈ°µ')\n        logger.info(\"ËøõÂÖ•ÁôªÈôÜÈ°µÈù¢\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        sleep(1)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, 'ÂÆûÂêçËÆ§ËØÅ')\n        logger.info(\"ÂÆûÂêçËÆ§ËØÅÁîªÈù¢ÊàêÂäüÊòæÁ§∫\")\n>       getVerification(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17621198955'\n\n    def getVerification(url, act):\n        r = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n        print('token‰∏∫Ôºö' + data)\n    \n        r = RedisSqldata()\n        keys = r.keys()\n        pipe = r.pipeline()\n        pipe_size = 100000\n        len = 0\n        key_list = []\n        print(r.pipeline())\n    \n        for key in keys:\n            key_list.append(key)\n            pipe.get(key)\n            if len < pipe_size:\n                len += 1\n            else:\n                for (k, v) in zip(key_list, pipe.execute()):\n                    len = 0\n                    key_list = []\n    \n        for (k, v) in zip(key_list, pipe.execute()):\n            k = bytes.decode(k)\n            v = bytes.decode(v)\n            if k == 'token:' + data:\n                print(v)\n>               dic = eval(v.replace('null', ' '))\nE                 File \"<string>\", line 1\nE                   {\"@class\":\"com.bird.web.sso.ticket.ServerTicket\",\"userId\":\"0kf3pnsfd-0174-748fb578-8a8a0018-020f\",\"tenantId\":\"chengtay-tech\",\"userName\":\"17621198955\",\"realName\": ,\"creationTime\":[\"java.util.Date\",1600159530358],\"lastRefreshTime\":[\"java.util.Date\",1600159530358],\"expireTime\":[\"java.util.Date\",1600181130358],\"appClaims\":{\"@class\":\"java.util.HashMap\"}}\nE                                                                                                                                                                                     ^\nE               SyntaxError: invalid syntax\n\ncommon\\dbLink.py:202: SyntaxError"}, "description": "ÊµãËØï http://10.10.128.152:10053/personal/set/certification ‰∏™‰∫∫ÂÆûÂêçËÆ§ËØÅ", "attachments": [{"name": "log", "source": "096baf5e-119a-4d87-8c53-c390db0ee43c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "1dbd1dde-6bc9-4fc5-8edb-0178be22a04a-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7d87e82c-15d8-489d-910f-99a6665257bb-attachment.txt", "type": "text/plain"}], "start": 1600159421751, "stop": 1600159485131, "uuid": "bc847bde-2142-4208-8b2f-23e8c695d333", "historyId": "28dda5313ff182aeade3becf47df4372", "testCaseId": "9cbf013f05cb6ad37536fb98be3bcb37", "fullName": "test_flow.test_Authentication.test_personalInfoReg#test_infoReg", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_personalInfoReg"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "12444-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_personalInfoReg"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/personal/set/certification", "name": "‰∏™‰∫∫ÂÆûÂêçËÆ§ËØÅ üëá"}]}
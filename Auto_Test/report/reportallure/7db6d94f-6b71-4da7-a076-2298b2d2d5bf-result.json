{"name": "test_infoReg", "status": "broken", "statusDetails": {"message": "TypeError: descriptor 'decode' for 'bytes' objects doesn't apply to a 'NoneType' object", "trace": "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 👇\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        sleep(1)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        sleep(1)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n        name = yamldict['test_personalInfoRegList']['name']\n        idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n        driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n        driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n        BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n        driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n    \n        while 1:\n            message = getPhoneMessage().get(\"auMes\")\n            if message is None:\n                sleep(0.5)\n                continue\n            else:\n                break\n        driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n            message.strip().strip('\"'))\n    \n        picture_dir = os.getcwd()\n        pcture_dirOne = '\\\\test_data\\\\picture\\\\id_1.jpg'\n        pcture_dirTwo = '\\\\test_data\\\\picture\\\\id_2.jpg'\n        driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture1_css.value).send_keys(\n            picture_dir + pcture_dirOne)\n        BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture1_css.value)\n        driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture2_css.value).send_keys(\n            picture_dir + pcture_dirTwo)\n        BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture2_css.value)\n        waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n        sleep(1)\n        driver.find_element_by_css_selector(path_personalInfoReg.btn_aut_css.value).click()\n        while 1:\n>           certification = getVerification(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17621198955'\n\n    def getVerification(url, act):\n        r = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n        print('token为：' + data)\n    \n        r = RedisSqldata()\n        keys = r.keys()\n        pipe = r.pipeline()\n        pipe_size = 100000\n        len = 0\n        key_list = []\n        print(r.pipeline())\n    \n        for key in keys:\n            key_list.append(key)\n            pipe.get(key)\n            if len < pipe_size:\n                len += 1\n            else:\n                for (k, v) in zip(key_list, pipe.execute()):\n                    len = 0\n                    key_list = []\n    \n        for (k, v) in zip(key_list, pipe.execute()):\n            k = bytes.decode(k)\n            v = bytes.decode(v)\n            if k == 'token:' + data:\n                v = v.replace('null', '\\\"'+'ok'+'\\\"')\n                dic = eval(v)\n                userId = dic.get('userId')\n                print('userId为：' + userId)\n                break\n        value1 = r.get(str(userId))\n>       strValue2 = bytes.decode(value1).replace('\"', \"'\")\nE       TypeError: descriptor 'decode' for 'bytes' objects doesn't apply to a 'NoneType' object\n\ncommon\\dbLink.py:207: TypeError"}, "description": "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证", "attachments": [{"name": "log", "source": "8f0b8810-1c54-4a8a-96f7-35639b624ac7-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "9a506163-d40e-4ff8-9a12-2d89fa65c3a4-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "aa8a4888-1a90-480f-b1d7-6478cf3ce6fc-attachment.txt", "type": "text/plain"}], "start": 1600161910206, "stop": 1600161927867, "uuid": "1c6deeb7-b5ee-4eda-a762-c74a86215bf3", "historyId": "28dda5313ff182aeade3becf47df4372", "testCaseId": "9cbf013f05cb6ad37536fb98be3bcb37", "fullName": "test_flow.test_Authentication.test_personalInfoReg#test_infoReg", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_personalInfoReg"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "21012-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_personalInfoReg"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/personal/set/certification", "name": "个人实名认证 👇"}]}
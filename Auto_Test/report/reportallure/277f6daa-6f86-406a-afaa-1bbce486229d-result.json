{"name": "test_companyRegister", "status": "broken", "statusDetails": {"message": "AttributeError: href_passForget_css", "trace": "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"ÊµãËØï http://10.10.128.152:10053/user/register ‰∏≠Â∞èÂæÆ‰ºÅ‰∏öÊ≥®ÂÜåÊµÅÁ®ã\")\n    @allure.testcase(\"http://10.10.128.152:10053/user/register\", \"Ê≥®ÂÜå üëá\")\n    def test_companyRegister():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"ÂºÄÂßãÊâßË°åËÑöÊú¨%s:\\n\", def_name)\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_ui_register)\n            # db‰∏≠Ê∏ÖÈô§Â∑≤Ê≥®ÂÜåÁöÑË¥¶Êà∑\n            deleteInforMobile()\n            logger.info(\"ÂØπÂ∑≤Ê≥®ÂÜåÁöÑË¥¶Êà∑ËøõË°åÂà†Èô§Êìç‰Ωú\")\n            sleep(1)\n            waitUntilClick(driver, loginOn.btn_agree_css.value)\n            driver.find_element_by_css_selector(loginOn.btn_agree_css.value).click()\n    \n            waitUntilDisplay(driver, loginOn.input_act_css.value)\n            driver.find_element_by_css_selector(loginOn.input_act_css.value).send_keys(act)\n            driver.find_element_by_css_selector(loginOn.input_pwd_css.value).send_keys(pwd)\n            driver.find_element_by_css_selector(loginOn.input_conPwd_css.value).send_keys(pwd)\n            waitUntilClick(driver, loginOn.btn_phoneCode_css.value)\n            sleep(2)\n            flushDb()\n            driver.find_element_by_css_selector(loginOn.btn_phoneCode_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"regMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n    \n            driver.find_element_by_css_selector(loginOn.input_phoneCode_css.value).send_keys(message.strip().strip('\"'))\n            waitUntilClick(driver, loginOn.btn_agreeReg.value)\n            driver.find_element_by_css_selector(loginOn.btn_agreeReg.value).click()\n    \n            title = driver.title\n            test_Assert.assert_text_ui(title, '‰∏≠Â∞èÂæÆ‰ºÅ‰∏öÈáëËûçÊúçÂä°ËÅöÂêàÂπ≥Âè∞')\n            logger.info(\"Ê≥®ÂÜåÊàêÂäüÔºåËøîÂõûÂà∞ÁôªÈôÜÈ°µÈù¢\")\n            sleep(1)\n            driver.quit()\n        else:\n            deleteInforMobile()  # Âà†Èô§‰∏™‰∫∫‰ø°ÊÅØ\n            startWeinxin()\n            waiteForClick(mobileDriver(text='‰∏ÄÈîÆÂæÆ‰ø°ÊéàÊùÉÁôªÂΩï'))\n            waiteForClick(mobileDriver(text='ÂÖÅËÆ∏'))\n            waiteForClick(mobileDriver(text='ÊéàÊùÉÊâãÊú∫Âè∑'))\n            waiteForClick(mobileDriver(text='ÂÖÅËÆ∏'))\n    \n            logger.info(\"PC Á´ØËøõË°åÂØÜÁ†Å‰øÆÊîπ\")\n>           companyPassForget(act)\n\ntest_flow\\test_Authentication\\test_login.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_flow\\test_Authentication\\test_login.py:185: in companyPassForget\n    waitUntilClick(driver, path_backStage_authentication.href_passForget_css.value)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <enum 'path_backStage_authentication'>, name = 'href_passForget_css'\n\n    def __getattr__(cls, name):\n        \"\"\"Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n    \n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: href_passForget_css\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\enum.py:324: AttributeError"}, "description": "ÊµãËØï http://10.10.128.152:10053/user/register ‰∏≠Â∞èÂæÆ‰ºÅ‰∏öÊ≥®ÂÜåÊµÅÁ®ã", "attachments": [{"name": "log", "source": "9040322e-526a-41a5-8224-026878dbe443-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "ce867bd0-a917-4c3a-b572-7472bdf1f9b1-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "b2e0b17f-caf3-4dc0-955d-7c67bec4fca0-attachment.txt", "type": "text/plain"}], "start": 1602494826878, "stop": 1602494856324, "uuid": "a18d5934-950f-4c7c-85a9-75350b81c741", "historyId": "dd0646a5c1a798e47c4f25747509dea9", "testCaseId": "1fe2bac8daa9cfa6b5ae5069ce9a9205", "fullName": "test_flow.test_Authentication.test_login#test_companyRegister", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=1)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "9748-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_login"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/user/register", "name": "Ê≥®ÂÜå üëá"}]}
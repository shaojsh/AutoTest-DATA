{"name": "test_infoReg", "status": "broken", "statusDetails": {"message": "TypeError: find() takes at least 1 argument (0 given)", "trace": "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 👇\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        sleep(1)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        sleep(1)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n>       getVerification(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17621198955'\n\n    def getVerification(url, act):\n        r = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n        print('token为：' + data)\n    \n        r = RedisSqldata()\n        keys = r.keys()\n        pipe = r.pipeline()\n        pipe_size = 100000\n        len = 0\n        key_list = []\n        print(r.pipeline())\n    \n        for key in keys:\n            key_list.append(key)\n            pipe.get(key)\n            if len < pipe_size:\n                len += 1\n            else:\n                for (k, v) in zip(key_list, pipe.execute()):\n                    len = 0\n                    key_list = []\n    \n        for (k, v) in zip(key_list, pipe.execute()):\n            k = bytes.decode(k)\n            v = bytes.decode(v)\n            if k == 'token:' + data:\n                print()\n>               v.find()\nE               TypeError: find() takes at least 1 argument (0 given)\n\ncommon\\dbLink.py:202: TypeError"}, "description": "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证", "attachments": [{"name": "log", "source": "f0310993-56ed-4d7b-84c3-f9c8ecd5e125-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "0e772cab-22b2-4b96-9b3b-10d63725160b-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "de90020d-09d9-49fd-a080-a8334c2759f6-attachment.txt", "type": "text/plain"}], "start": 1600160593866, "stop": 1600160610004, "uuid": "f675ec54-fa1b-4480-b63b-ae0e019dd81a", "historyId": "28dda5313ff182aeade3becf47df4372", "testCaseId": "9cbf013f05cb6ad37536fb98be3bcb37", "fullName": "test_flow.test_Authentication.test_personalInfoReg#test_infoReg", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=2)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_personalInfoReg"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "3788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_personalInfoReg"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/personal/set/certification", "name": "个人实名认证 👇"}]}
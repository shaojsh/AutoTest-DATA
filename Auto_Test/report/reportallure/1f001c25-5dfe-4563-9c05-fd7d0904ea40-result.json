{"name": "test_businessInforReg", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "@pytest.mark.run(order=3)\n    @allure.severity(\"blocker\")\n    @allure.description(\"ÊµãËØï http://10.10.128.152:10053/personal/baseinfo ‰ºÅ‰∏öËÆ§ËØÅ\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/baseinfo\", \"‰ºÅ‰∏öËÆ§ËØÅ üëá\")\n    def test_businessInforReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"ÂºÄÂßãÊâßË°åËÑöÊú¨%s:\\n\", def_name)\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # ÁôªÈôÜÈ°µÈù¢\n        login(driver)\n        waitUntilDisplay(driver, path_businessInfoReg.txt_aut_css.value)\n        txt_auTitle = driver.find_element_by_css_selector(path_businessInfoReg.txt_aut_css.value).text\n        test_Assert.assert_text_ui(txt_auTitle, '‰ºÅ‰∏öÂü∫Êú¨ËµÑÊñô')\n        logger.info(\"‰ºÅ‰∏öÂü∫Êú¨ËµÑÊñôÁîªÈù¢Ê≠£Â∏∏ÊòæÁ§∫\")\n    \n        # ‰ºÅ‰∏öËØÅ‰ª∂\n        el = driver.find_element_by_css_selector(path_businessInfoReg.input_companyName_css.value)\n        el.send_keys(businessName)\n>       waitUntilDisplay_xpath(driver, path_businessInfoReg.display_name_xpath.value)\n\ntest_flow\\test_Authentication\\test_businessInfoReg.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\BaseFunction.py:19: in waitUntilDisplay_xpath\n    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"dd2f1ada97d9cb4a875d5d685435686d\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000029B232BB8D0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "description": "ÊµãËØï http://10.10.128.152:10053/personal/baseinfo ‰ºÅ‰∏öËÆ§ËØÅ", "attachments": [{"name": "log", "source": "7e279fc2-8da8-41f5-a9c8-2929e8ad4444-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "0aa2c22b-d51a-4ffa-9ac5-84595b2a4630-attachment.txt", "type": "text/plain"}], "start": 1600676566282, "stop": 1600676607734, "uuid": "5a29adce-f0c1-426e-a2a6-45ab1f272d49", "historyId": "673c6cf796d54f5cbc2e9852ef4f69c7", "testCaseId": "b3e74db3e441c16c318663de4be2f7da", "fullName": "test_flow.test_Authentication.test_businessInfoReg#test_businessInforReg", "labels": [{"name": "severity", "value": "blocker"}, {"name": "tag", "value": "run(order=3)"}, {"name": "parentSuite", "value": "test_flow.test_Authentication"}, {"name": "suite", "value": "test_businessInfoReg"}, {"name": "host", "value": "A02-03-00033"}, {"name": "thread", "value": "7620-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_flow.test_Authentication.test_businessInfoReg"}], "links": [{"type": "test_case", "url": "http://10.10.128.152:10053/personal/baseinfo", "name": "‰ºÅ‰∏öËÆ§ËØÅ üëá"}]}
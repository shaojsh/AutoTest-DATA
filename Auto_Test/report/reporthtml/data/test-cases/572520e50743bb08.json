{
  "uid" : "572520e50743bb08",
  "name" : "test_companyRegister",
  "fullName" : "test_flow.test_Authentication.test_login#test_companyRegister",
  "historyId" : "dd0646a5c1a798e47c4f25747509dea9",
  "time" : {
    "start" : 1602839478785,
    "stop" : 1602839533103,
    "duration" : 54318
  },
  "description" : "测试 http://10.10.128.152:10053/user/register 中小微企业注册流程",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/user/register 中小微企业注册流程</p>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: must be str, not NoneType",
  "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/user/register 中小微企业注册流程\")\n    @allure.testcase(\"http://10.10.128.152:10053/user/register\", \"注册 \uD83D\uDC47\")\n    def test_companyRegister():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_ui_register)\n            # db中清除已注册的账户\n            deleteInforMobile()\n            logger.info(\"对已注册的账户进行删除操作\")\n            sleep(1)\n            waitUntilClick(driver, loginOn.btn_agree_css.value)\n            driver.find_element_by_css_selector(loginOn.btn_agree_css.value).click()\n    \n            waitUntilDisplay(driver, loginOn.input_act_css.value)\n            driver.find_element_by_css_selector(loginOn.input_act_css.value).send_keys(act)\n            driver.find_element_by_css_selector(loginOn.input_pwd_css.value).send_keys(pwd)\n            driver.find_element_by_css_selector(loginOn.input_conPwd_css.value).send_keys(pwd)\n            waitUntilClick(driver, loginOn.btn_phoneCode_css.value)\n            sleep(2)\n            flushDb()\n            driver.find_element_by_css_selector(loginOn.btn_phoneCode_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"regMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n    \n            driver.find_element_by_css_selector(loginOn.input_phoneCode_css.value).send_keys(message.strip().strip('\"'))\n            waitUntilClick(driver, loginOn.btn_agreeReg.value)\n            driver.find_element_by_css_selector(loginOn.btn_agreeReg.value).click()\n    \n            title = driver.title\n            test_Assert.assert_text_ui(title, '中小微企业金融服务聚合平台')\n            logger.info(\"注册成功，返回到登陆页面\")\n            sleep(1)\n            driver.quit()\n        else:\n            # touch(Template(r\"C:\\Users\\shaojunshuai\\PycharmProjects\\AutoTest-python\\Auto_Test\\test_data\\picture\\id_5.png\"))\n            startWeinxin()\n            deleteInforMobile()  # 删除个人信息\n            # clearCache()\n            mobileDriver(text='一键微信授权登录').click()\n            waiteForClick(mobileDriver(text='允许'))\n            waiteForClick(mobileDriver(text='授权手机号'))\n            waiteForClick(mobileDriver(text='允许'))\n    \n            logger.info(\"PC 端进行密码修改\")\n            # companyPassForgetForward(act)\n            logger.info(\"小程序个人实名认证页面\")\n    \n            # 上传身份证正反面\n            waiteForClick(mobileDriver(text='请上传身份证头像面'))\n            waiteForClick(mobileDriver(text='所有图片'))\n            waiteForClick(mobileDriver(text='自动化测试专用相册'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                3].child(\n                \"com.tencent.mm:id/dm0\").click()\n            waiteForClick(mobileDriver(text='完成'))\n            sleep(2)\n            waiteForClick(mobileDriver(text='请上传身份证国徽面'))\n            waiteForClick(mobileDriver(text='所有图片'))\n            waiteForClick(mobileDriver(text='自动化测试专用相册'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                2].child(\n                \"com.tencent.mm:id/dm8\").click()\n            waiteForClick(mobileDriver(text='完成'))\n            sleep(1)\n            waiteForClick(mobileDriver(text='提交认证'))\n            # 活体认证欺诈性校验\n>           getVerification_ui(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_login.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17082238021'\n\n    def getVerification_ui(url, act):\n        r0 = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r0.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n>       print('token为：' + data)\nE       TypeError: must be str, not NoneType\n\ncommon\\dbLink.py:249: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/user/register 中小微企业注册流程",
    "status" : "broken",
    "statusMessage" : "TypeError: must be str, not NoneType",
    "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/user/register 中小微企业注册流程\")\n    @allure.testcase(\"http://10.10.128.152:10053/user/register\", \"注册 \uD83D\uDC47\")\n    def test_companyRegister():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_ui_register)\n            # db中清除已注册的账户\n            deleteInforMobile()\n            logger.info(\"对已注册的账户进行删除操作\")\n            sleep(1)\n            waitUntilClick(driver, loginOn.btn_agree_css.value)\n            driver.find_element_by_css_selector(loginOn.btn_agree_css.value).click()\n    \n            waitUntilDisplay(driver, loginOn.input_act_css.value)\n            driver.find_element_by_css_selector(loginOn.input_act_css.value).send_keys(act)\n            driver.find_element_by_css_selector(loginOn.input_pwd_css.value).send_keys(pwd)\n            driver.find_element_by_css_selector(loginOn.input_conPwd_css.value).send_keys(pwd)\n            waitUntilClick(driver, loginOn.btn_phoneCode_css.value)\n            sleep(2)\n            flushDb()\n            driver.find_element_by_css_selector(loginOn.btn_phoneCode_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"regMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n    \n            driver.find_element_by_css_selector(loginOn.input_phoneCode_css.value).send_keys(message.strip().strip('\"'))\n            waitUntilClick(driver, loginOn.btn_agreeReg.value)\n            driver.find_element_by_css_selector(loginOn.btn_agreeReg.value).click()\n    \n            title = driver.title\n            test_Assert.assert_text_ui(title, '中小微企业金融服务聚合平台')\n            logger.info(\"注册成功，返回到登陆页面\")\n            sleep(1)\n            driver.quit()\n        else:\n            # touch(Template(r\"C:\\Users\\shaojunshuai\\PycharmProjects\\AutoTest-python\\Auto_Test\\test_data\\picture\\id_5.png\"))\n            startWeinxin()\n            deleteInforMobile()  # 删除个人信息\n            # clearCache()\n            mobileDriver(text='一键微信授权登录').click()\n            waiteForClick(mobileDriver(text='允许'))\n            waiteForClick(mobileDriver(text='授权手机号'))\n            waiteForClick(mobileDriver(text='允许'))\n    \n            logger.info(\"PC 端进行密码修改\")\n            # companyPassForgetForward(act)\n            logger.info(\"小程序个人实名认证页面\")\n    \n            # 上传身份证正反面\n            waiteForClick(mobileDriver(text='请上传身份证头像面'))\n            waiteForClick(mobileDriver(text='所有图片'))\n            waiteForClick(mobileDriver(text='自动化测试专用相册'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                3].child(\n                \"com.tencent.mm:id/dm0\").click()\n            waiteForClick(mobileDriver(text='完成'))\n            sleep(2)\n            waiteForClick(mobileDriver(text='请上传身份证国徽面'))\n            waiteForClick(mobileDriver(text='所有图片'))\n            waiteForClick(mobileDriver(text='自动化测试专用相册'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                2].child(\n                \"com.tencent.mm:id/dm8\").click()\n            waiteForClick(mobileDriver(text='完成'))\n            sleep(1)\n            waiteForClick(mobileDriver(text='提交认证'))\n            # 活体认证欺诈性校验\n>           getVerification_ui(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_login.py:127: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17082238021'\n\n    def getVerification_ui(url, act):\n        r0 = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r0.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n>       print('token为：' + data)\nE       TypeError: must be str, not NoneType\n\ncommon\\dbLink.py:249: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4ca6348395913f1d",
      "name" : "log",
      "source" : "4ca6348395913f1d.txt",
      "type" : "text/plain",
      "size" : 4335
    }, {
      "uid" : "ab261751adbb8a47",
      "name" : "stderr",
      "source" : "ab261751adbb8a47.txt",
      "type" : "text/plain",
      "size" : 4409
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "8112-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "注册 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/user/register",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "572520e50743bb08.json",
  "parameterValues" : [ ]
}
{
  "uid" : "ad73c55946616145",
  "name" : "test_companyRegister",
  "fullName" : "test_flow.test_Authentication.test_login#test_companyRegister",
  "historyId" : "dd0646a5c1a798e47c4f25747509dea9",
  "time" : {
    "start" : 1602566178649,
    "stop" : 1602566375266,
    "duration" : 196617
  },
  "description" : "测试 http://10.10.128.152:10053/user/register 中小微企业注册流程",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/user/register 中小微企业注册流程</p>\n",
  "status" : "broken",
  "statusMessage" : "IndexError: list index out of range",
  "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/user/register 中小微企业注册流程\")\n    @allure.testcase(\"http://10.10.128.152:10053/user/register\", \"注册 \uD83D\uDC47\")\n    def test_companyRegister():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_ui_register)\n            # db中清除已注册的账户\n            deleteInforMobile()\n            logger.info(\"对已注册的账户进行删除操作\")\n            sleep(1)\n            waitUntilClick(driver, loginOn.btn_agree_css.value)\n            driver.find_element_by_css_selector(loginOn.btn_agree_css.value).click()\n    \n            waitUntilDisplay(driver, loginOn.input_act_css.value)\n            driver.find_element_by_css_selector(loginOn.input_act_css.value).send_keys(act)\n            driver.find_element_by_css_selector(loginOn.input_pwd_css.value).send_keys(pwd)\n            driver.find_element_by_css_selector(loginOn.input_conPwd_css.value).send_keys(pwd)\n            waitUntilClick(driver, loginOn.btn_phoneCode_css.value)\n            sleep(2)\n            flushDb()\n            driver.find_element_by_css_selector(loginOn.btn_phoneCode_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"regMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n    \n            driver.find_element_by_css_selector(loginOn.input_phoneCode_css.value).send_keys(message.strip().strip('\"'))\n            waitUntilClick(driver, loginOn.btn_agreeReg.value)\n            driver.find_element_by_css_selector(loginOn.btn_agreeReg.value).click()\n    \n            title = driver.title\n            test_Assert.assert_text_ui(title, '中小微企业金融服务聚合平台')\n            logger.info(\"注册成功，返回到登陆页面\")\n            sleep(1)\n            driver.quit()\n        else:\n            deleteInforMobile()  # 删除个人信息\n            startWeinxin()\n            waiteForClick(mobileDriver(text='一键微信授权登录'))\n            waiteForClick(mobileDriver(text='允许'))\n            waiteForClick(mobileDriver(text='授权手机号'))\n            waiteForClick(mobileDriver(text='允许'))\n    \n            logger.info(\"PC 端进行密码修改\")\n            # companyPassForgetForward(act)\n            logger.info(\"小程序个人实名认证页面\")\n    \n            # 上传身份证正反面\n            waiteForClick(mobileDriver(text='请上传身份证头像面'))\n            waiteForClick(mobileDriver(text='所有图片'))\n            waiteForClick(mobileDriver(text='自动化测试专用相册'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                2].child(\n                \"com.tencent.mm:id/dm0\").click()\n            waiteForClick(mobileDriver(text='完成'))\n            sleep(2)\n            waiteForClick(mobileDriver(text='请上传身份证国徽面'))\n            waiteForClick(mobileDriver(text='所有图片'))\n            waiteForClick(mobileDriver(text='自动化测试专用相册'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                0].child(\n                \"com.tencent.mm:id/dm8\").click()\n            waiteForClick(mobileDriver(text='完成'))\n            waiteForClick(mobileDriver(text='提交认证'))\n    \n            # 活体认证欺诈性校验\n            getVerification(RequestURL, act)\n    \n            while True:\n                text = mobileDriver(\"android.widget.FrameLayout\").child(\"android.widget.FrameLayout\").offspring(\n                    \"android:id/content\").child(\"android.widget.FrameLayout\").child(\"android.widget.FrameLayout\").child(\n                    \"android.widget.FrameLayout\").offspring(\"android.widget.RelativeLayout\").child(\n                    \"android.widget.FrameLayout\").child(\"android.widget.FrameLayout\").child(\"android.widget.FrameLayout\")[\n>                   1].offspring(\"android.view.ViewGroup\").child(\"android.widget.FrameLayout\").offspring(\"_n_109\")[1].get_text()\n\ntest_flow\\test_Authentication\\test_login.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = UIObjectProxy of \"android.widget.FrameLayout/android.widget.FrameLayout>android:id/content/android.widget.FrameLayout/...yout/android.widget.FrameLayout/android.widget.FrameLayout[1]>android.view.ViewGroup/android.widget.FrameLayout>_n_109\"\nitem = 1\n\n    def __getitem__(self, item):\n        \"\"\"\n        Select the specific UI element by index. If this UI proxy represents a set of UI elements, then use this method\n        to access the specific UI element. The new UI element will be wrapped by UIObjectProxy instance and therefore\n        the returned value is also the UI proxy object.\n    \n        The order of UI elements are determined by their position on the screen and not by the selection sequence. This\n        rule is called  \"L2R U2D\" (one by one from left to right, line by line from up to down), i.e. the most top left\n        UI element is always the first one. See ``IterationOverUI`` for more details.\n    \n        Warnings:\n            This method may cause some performance issues depending on implementation of PocoAgent.\n    \n        Args:\n            item (:obj:`int`): the index.\n    \n        Returns:\n            :py:class:`UIObjectProxy <poco.proxy.UIObjectProxy>`: a new UI proxy object representing the n-th of the\n            current UI elements.\n        \"\"\"\n    \n        if not self._query_multiple:\n            nodes = self._do_query(multiple=True, refresh=True)\n        else:\n            nodes = self._nodes\n        length = len(nodes)\n        if not self._sorted_children:\n            self._sorted_children = []\n            for i in range(length):\n                uiobj = UIObjectProxy(self.poco)\n                uiobj.query = ('index', (self.query, i))\n                uiobj._evaluated = True\n                uiobj._query_multiple = True\n                uiobj._nodes = nodes[i]\n                uiobj._nodes_proxy_is_list = False\n                pos = uiobj.get_position()\n                self._sorted_children.append((uiobj, pos))\n    \n        self._sorted_children.sort(key=lambda v: (v[1][1], v[1][0]))\n>       return self._sorted_children[item][0]\nE       IndexError: list index out of range\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\poco\\proxy.py:250: IndexError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/user/register 中小微企业注册流程",
    "status" : "broken",
    "statusMessage" : "IndexError: list index out of range",
    "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/user/register 中小微企业注册流程\")\n    @allure.testcase(\"http://10.10.128.152:10053/user/register\", \"注册 \uD83D\uDC47\")\n    def test_companyRegister():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_ui_register)\n            # db中清除已注册的账户\n            deleteInforMobile()\n            logger.info(\"对已注册的账户进行删除操作\")\n            sleep(1)\n            waitUntilClick(driver, loginOn.btn_agree_css.value)\n            driver.find_element_by_css_selector(loginOn.btn_agree_css.value).click()\n    \n            waitUntilDisplay(driver, loginOn.input_act_css.value)\n            driver.find_element_by_css_selector(loginOn.input_act_css.value).send_keys(act)\n            driver.find_element_by_css_selector(loginOn.input_pwd_css.value).send_keys(pwd)\n            driver.find_element_by_css_selector(loginOn.input_conPwd_css.value).send_keys(pwd)\n            waitUntilClick(driver, loginOn.btn_phoneCode_css.value)\n            sleep(2)\n            flushDb()\n            driver.find_element_by_css_selector(loginOn.btn_phoneCode_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"regMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n    \n            driver.find_element_by_css_selector(loginOn.input_phoneCode_css.value).send_keys(message.strip().strip('\"'))\n            waitUntilClick(driver, loginOn.btn_agreeReg.value)\n            driver.find_element_by_css_selector(loginOn.btn_agreeReg.value).click()\n    \n            title = driver.title\n            test_Assert.assert_text_ui(title, '中小微企业金融服务聚合平台')\n            logger.info(\"注册成功，返回到登陆页面\")\n            sleep(1)\n            driver.quit()\n        else:\n            deleteInforMobile()  # 删除个人信息\n            startWeinxin()\n            waiteForClick(mobileDriver(text='一键微信授权登录'))\n            waiteForClick(mobileDriver(text='允许'))\n            waiteForClick(mobileDriver(text='授权手机号'))\n            waiteForClick(mobileDriver(text='允许'))\n    \n            logger.info(\"PC 端进行密码修改\")\n            # companyPassForgetForward(act)\n            logger.info(\"小程序个人实名认证页面\")\n    \n            # 上传身份证正反面\n            waiteForClick(mobileDriver(text='请上传身份证头像面'))\n            waiteForClick(mobileDriver(text='所有图片'))\n            waiteForClick(mobileDriver(text='自动化测试专用相册'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                2].child(\n                \"com.tencent.mm:id/dm0\").click()\n            waiteForClick(mobileDriver(text='完成'))\n            sleep(2)\n            waiteForClick(mobileDriver(text='请上传身份证国徽面'))\n            waiteForClick(mobileDriver(text='所有图片'))\n            waiteForClick(mobileDriver(text='自动化测试专用相册'))\n            mobileDriver(\"android.widget.LinearLayout\").offspring(\"com.tencent.mm:id/dm6\").child(\"com.tencent.mm:id/f4b\")[\n                0].child(\n                \"com.tencent.mm:id/dm8\").click()\n            waiteForClick(mobileDriver(text='完成'))\n            waiteForClick(mobileDriver(text='提交认证'))\n    \n            # 活体认证欺诈性校验\n            getVerification(RequestURL, act)\n    \n            while True:\n                text = mobileDriver(\"android.widget.FrameLayout\").child(\"android.widget.FrameLayout\").offspring(\n                    \"android:id/content\").child(\"android.widget.FrameLayout\").child(\"android.widget.FrameLayout\").child(\n                    \"android.widget.FrameLayout\").offspring(\"android.widget.RelativeLayout\").child(\n                    \"android.widget.FrameLayout\").child(\"android.widget.FrameLayout\").child(\"android.widget.FrameLayout\")[\n>                   1].offspring(\"android.view.ViewGroup\").child(\"android.widget.FrameLayout\").offspring(\"_n_109\")[1].get_text()\n\ntest_flow\\test_Authentication\\test_login.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = UIObjectProxy of \"android.widget.FrameLayout/android.widget.FrameLayout>android:id/content/android.widget.FrameLayout/...yout/android.widget.FrameLayout/android.widget.FrameLayout[1]>android.view.ViewGroup/android.widget.FrameLayout>_n_109\"\nitem = 1\n\n    def __getitem__(self, item):\n        \"\"\"\n        Select the specific UI element by index. If this UI proxy represents a set of UI elements, then use this method\n        to access the specific UI element. The new UI element will be wrapped by UIObjectProxy instance and therefore\n        the returned value is also the UI proxy object.\n    \n        The order of UI elements are determined by their position on the screen and not by the selection sequence. This\n        rule is called  \"L2R U2D\" (one by one from left to right, line by line from up to down), i.e. the most top left\n        UI element is always the first one. See ``IterationOverUI`` for more details.\n    \n        Warnings:\n            This method may cause some performance issues depending on implementation of PocoAgent.\n    \n        Args:\n            item (:obj:`int`): the index.\n    \n        Returns:\n            :py:class:`UIObjectProxy <poco.proxy.UIObjectProxy>`: a new UI proxy object representing the n-th of the\n            current UI elements.\n        \"\"\"\n    \n        if not self._query_multiple:\n            nodes = self._do_query(multiple=True, refresh=True)\n        else:\n            nodes = self._nodes\n        length = len(nodes)\n        if not self._sorted_children:\n            self._sorted_children = []\n            for i in range(length):\n                uiobj = UIObjectProxy(self.poco)\n                uiobj.query = ('index', (self.query, i))\n                uiobj._evaluated = True\n                uiobj._query_multiple = True\n                uiobj._nodes = nodes[i]\n                uiobj._nodes_proxy_is_list = False\n                pos = uiobj.get_position()\n                self._sorted_children.append((uiobj, pos))\n    \n        self._sorted_children.sort(key=lambda v: (v[1][1], v[1][0]))\n>       return self._sorted_children[item][0]\nE       IndexError: list index out of range\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\poco\\proxy.py:250: IndexError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "9e46d8135aa65d01",
      "name" : "log",
      "source" : "9e46d8135aa65d01.txt",
      "type" : "text/plain",
      "size" : 6027
    }, {
      "uid" : "d1dd42d84988316c",
      "name" : "stdout",
      "source" : "d1dd42d84988316c.txt",
      "type" : "text/plain",
      "size" : 22844
    }, {
      "uid" : "81b9c738228d7cf5",
      "name" : "stderr",
      "source" : "81b9c738228d7cf5.txt",
      "type" : "text/plain",
      "size" : 6101
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "7092-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "注册 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/user/register",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "ad73c55946616145.json",
  "parameterValues" : [ ]
}
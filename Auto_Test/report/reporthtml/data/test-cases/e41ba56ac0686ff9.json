{
  "uid" : "e41ba56ac0686ff9",
  "name" : "test_Android",
  "fullName" : "test_flow.test_Authentication.test_jenkinsDebug#test_Android",
  "historyId" : "037f6ac01dca35d949e1d56271286eaa",
  "time" : {
    "start" : 1637547306899,
    "stop" : 1637547317022,
    "duration" : 10123
  },
  "description" : "测试 小程序自动化疏通测试-Android",
  "descriptionHtml" : "<p>测试 小程序自动化疏通测试-Android</p>\n",
  "status" : "broken",
  "statusMessage" : "airtest.core.error.AdbShellError: stdout[b'  bash arg: -p\\r\\n  bash arg: hongao.xuweimonitor\\r\\n  bash arg: -c\\r\\n  bash arg: android.intent.category.LAUNCHER\\r\\n  bash arg: 1\\r\\n** No activities found to run, monkey aborted.\\r\\n'] stderr[b'args: [-p, hongao.xuweimonitor, -c, android.intent.category.LAUNCHER, 1]\\r\\n arg: \"-p\"\\r\\n arg: \"hongao.xuweimonitor\"\\r\\n arg: \"-c\"\\r\\n arg: \"android.intent.category.LAUNCHER\"\\r\\n arg: \"1\"\\r\\ndata=\"hongao.xuweimonitor\"\\r\\ndata=\"android.intent.category.LAUNCHER\"\\r\\n']",
  "statusTrace" : "self = <airtest.core.android.adb.ADB object at 0x000001F9FF858A58>\ncmd = ['monkey', '-p', 'hongao.xuweimonitor', '-c', 'android.intent.category.LAUNCHER', '1']\n\n    def shell(self, cmd):\n        \"\"\"\n        Run the `adb shell` command on the device\n    \n        Args:\n            cmd: a command to be run\n    \n        Raises:\n            AdbShellError: if command return value is non-zero or if any other `AdbError` occurred\n    \n        Returns:\n            command output\n    \n        \"\"\"\n        if self.sdk_version < SDK_VERISON_ANDROID7:\n            # for sdk_version < 25, adb shell do not raise error\n            # https://stackoverflow.com/questions/9379400/adb-error-codes\n            cmd = split_cmd(cmd) + [\";\", \"echo\", \"---$?---\"]\n            out = self.raw_shell(cmd).rstrip()\n            m = re.match(\"(.*)---(\\d+)---$\", out, re.DOTALL)\n            if not m:\n                warnings.warn(\"return code not matched\")\n                stdout = out\n                returncode = 0\n            else:\n                stdout = m.group(1)\n                returncode = int(m.group(2))\n            if returncode > 0:\n                raise AdbShellError(\"\", stdout)\n            return stdout\n        else:\n            try:\n>               out = self.raw_shell(cmd)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:371: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x000001F9FF858A58>\ncmds = ['shell', 'monkey', '-p', 'hongao.xuweimonitor', '-c', 'android.intent.category.LAUNCHER', ...]\nensure_unicode = True\n\n    def raw_shell(self, cmds, ensure_unicode=True):\n        \"\"\"\n        Handle `adb shell` command(s) with unicode support\n    \n        Args:\n            cmds: adb shell command(s)\n            ensure_unicode: decode/encode unicode True or False, default is True\n    \n        Returns:\n            command(s) output\n    \n        \"\"\"\n        cmds = ['shell'] + split_cmd(cmds)\n>       out = self.cmd(cmds, ensure_unicode=False)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x000001F9FF858A58>\ncmds = ['shell', 'monkey', '-p', 'hongao.xuweimonitor', '-c', 'android.intent.category.LAUNCHER', ...]\ndevice = True, ensure_unicode = False, timeout = None\n\n    def cmd(self, cmds, device=True, ensure_unicode=True, timeout=None):\n        \"\"\"\n        Run the adb command(s) in subprocess and return the standard output\n    \n        Args:\n            cmds: command(s) to be run\n            device: if True, the device serial number must be specified by -s serialno argument\n            ensure_unicode: encode/decode unicode of standard outputs (stdout, stderr)\n            timeout: timeout in seconds\n    \n        Raises:\n            DeviceConnectionError: if any error occurs when connecting the device\n            AdbError: if any other adb error occurs\n    \n        Returns:\n            command(s) standard output (stdout)\n    \n        \"\"\"\n        proc = self.start_cmd(cmds, device)\n        if timeout:\n            stdout, stderr = proc_communicate_timeout(proc, timeout)\n        else:\n            stdout, stderr = proc.communicate()\n    \n        if ensure_unicode:\n            stdout = stdout.decode(get_std_encoding(sys.stdout))\n            stderr = stderr.decode(get_std_encoding(sys.stderr))\n    \n        if proc.returncode > 0:\n            # adb connection error\n            pattern = DeviceConnectionError.DEVICE_CONNECTION_ERROR\n            if isinstance(stderr, binary_type):\n                pattern = pattern.encode(\"utf-8\")\n            if re.search(pattern, stderr):\n                raise DeviceConnectionError(stderr)\n            else:\n>               raise AdbError(stdout, stderr)\nE               airtest.core.error.AdbError: stdout[b'  bash arg: -p\\r\\n  bash arg: hongao.xuweimonitor\\r\\n  bash arg: -c\\r\\n  bash arg: android.intent.category.LAUNCHER\\r\\n  bash arg: 1\\r\\n** No activities found to run, monkey aborted.\\r\\n'] stderr[b'args: [-p, hongao.xuweimonitor, -c, android.intent.category.LAUNCHER, 1]\\r\\n arg: \"-p\"\\r\\n arg: \"hongao.xuweimonitor\"\\r\\n arg: \"-c\"\\r\\n arg: \"android.intent.category.LAUNCHER\"\\r\\n arg: \"1\"\\r\\ndata=\"hongao.xuweimonitor\"\\r\\ndata=\"android.intent.category.LAUNCHER\"\\r\\n']\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:194: AdbError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 小程序自动化疏通测试-Android\")\n    def test_Android():\n>       startApp()\n\ntest_flow\\test_Authentication\\test_jenkinsDebug.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nandroidBaseFlow.py:21: in startApp\n    start_app(\"hongao.xuweimonitor\")\nD:\\python\\lib\\site-packages\\airtest\\utils\\logwraper.py:71: in wrapper\n    res = f(*args, **kwargs)\nD:\\python\\lib\\site-packages\\airtest\\core\\api.py:150: in start_app\n    G.DEVICE.start_app(package, activity)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\android.py:157: in start_app\n    return self.adb.start_app(package, activity)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:1212: in start_app\n    self.shell(['monkey', '-p', package, '-c', 'android.intent.category.LAUNCHER', '1'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x000001F9FF858A58>\ncmd = ['monkey', '-p', 'hongao.xuweimonitor', '-c', 'android.intent.category.LAUNCHER', '1']\n\n    def shell(self, cmd):\n        \"\"\"\n        Run the `adb shell` command on the device\n    \n        Args:\n            cmd: a command to be run\n    \n        Raises:\n            AdbShellError: if command return value is non-zero or if any other `AdbError` occurred\n    \n        Returns:\n            command output\n    \n        \"\"\"\n        if self.sdk_version < SDK_VERISON_ANDROID7:\n            # for sdk_version < 25, adb shell do not raise error\n            # https://stackoverflow.com/questions/9379400/adb-error-codes\n            cmd = split_cmd(cmd) + [\";\", \"echo\", \"---$?---\"]\n            out = self.raw_shell(cmd).rstrip()\n            m = re.match(\"(.*)---(\\d+)---$\", out, re.DOTALL)\n            if not m:\n                warnings.warn(\"return code not matched\")\n                stdout = out\n                returncode = 0\n            else:\n                stdout = m.group(1)\n                returncode = int(m.group(2))\n            if returncode > 0:\n                raise AdbShellError(\"\", stdout)\n            return stdout\n        else:\n            try:\n                out = self.raw_shell(cmd)\n            except AdbError as err:\n>               raise AdbShellError(err.stdout, err.stderr)\nE               airtest.core.error.AdbShellError: stdout[b'  bash arg: -p\\r\\n  bash arg: hongao.xuweimonitor\\r\\n  bash arg: -c\\r\\n  bash arg: android.intent.category.LAUNCHER\\r\\n  bash arg: 1\\r\\n** No activities found to run, monkey aborted.\\r\\n'] stderr[b'args: [-p, hongao.xuweimonitor, -c, android.intent.category.LAUNCHER, 1]\\r\\n arg: \"-p\"\\r\\n arg: \"hongao.xuweimonitor\"\\r\\n arg: \"-c\"\\r\\n arg: \"android.intent.category.LAUNCHER\"\\r\\n arg: \"1\"\\r\\ndata=\"hongao.xuweimonitor\"\\r\\ndata=\"android.intent.category.LAUNCHER\"\\r\\n']\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:373: AdbShellError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1637547306806,
      "stop" : 1637547306897,
      "duration" : 91
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "测试 小程序自动化疏通测试-Android",
    "status" : "broken",
    "statusMessage" : "airtest.core.error.AdbShellError: stdout[b'  bash arg: -p\\r\\n  bash arg: hongao.xuweimonitor\\r\\n  bash arg: -c\\r\\n  bash arg: android.intent.category.LAUNCHER\\r\\n  bash arg: 1\\r\\n** No activities found to run, monkey aborted.\\r\\n'] stderr[b'args: [-p, hongao.xuweimonitor, -c, android.intent.category.LAUNCHER, 1]\\r\\n arg: \"-p\"\\r\\n arg: \"hongao.xuweimonitor\"\\r\\n arg: \"-c\"\\r\\n arg: \"android.intent.category.LAUNCHER\"\\r\\n arg: \"1\"\\r\\ndata=\"hongao.xuweimonitor\"\\r\\ndata=\"android.intent.category.LAUNCHER\"\\r\\n']",
    "statusTrace" : "self = <airtest.core.android.adb.ADB object at 0x000001F9FF858A58>\ncmd = ['monkey', '-p', 'hongao.xuweimonitor', '-c', 'android.intent.category.LAUNCHER', '1']\n\n    def shell(self, cmd):\n        \"\"\"\n        Run the `adb shell` command on the device\n    \n        Args:\n            cmd: a command to be run\n    \n        Raises:\n            AdbShellError: if command return value is non-zero or if any other `AdbError` occurred\n    \n        Returns:\n            command output\n    \n        \"\"\"\n        if self.sdk_version < SDK_VERISON_ANDROID7:\n            # for sdk_version < 25, adb shell do not raise error\n            # https://stackoverflow.com/questions/9379400/adb-error-codes\n            cmd = split_cmd(cmd) + [\";\", \"echo\", \"---$?---\"]\n            out = self.raw_shell(cmd).rstrip()\n            m = re.match(\"(.*)---(\\d+)---$\", out, re.DOTALL)\n            if not m:\n                warnings.warn(\"return code not matched\")\n                stdout = out\n                returncode = 0\n            else:\n                stdout = m.group(1)\n                returncode = int(m.group(2))\n            if returncode > 0:\n                raise AdbShellError(\"\", stdout)\n            return stdout\n        else:\n            try:\n>               out = self.raw_shell(cmd)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:371: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x000001F9FF858A58>\ncmds = ['shell', 'monkey', '-p', 'hongao.xuweimonitor', '-c', 'android.intent.category.LAUNCHER', ...]\nensure_unicode = True\n\n    def raw_shell(self, cmds, ensure_unicode=True):\n        \"\"\"\n        Handle `adb shell` command(s) with unicode support\n    \n        Args:\n            cmds: adb shell command(s)\n            ensure_unicode: decode/encode unicode True or False, default is True\n    \n        Returns:\n            command(s) output\n    \n        \"\"\"\n        cmds = ['shell'] + split_cmd(cmds)\n>       out = self.cmd(cmds, ensure_unicode=False)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:329: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x000001F9FF858A58>\ncmds = ['shell', 'monkey', '-p', 'hongao.xuweimonitor', '-c', 'android.intent.category.LAUNCHER', ...]\ndevice = True, ensure_unicode = False, timeout = None\n\n    def cmd(self, cmds, device=True, ensure_unicode=True, timeout=None):\n        \"\"\"\n        Run the adb command(s) in subprocess and return the standard output\n    \n        Args:\n            cmds: command(s) to be run\n            device: if True, the device serial number must be specified by -s serialno argument\n            ensure_unicode: encode/decode unicode of standard outputs (stdout, stderr)\n            timeout: timeout in seconds\n    \n        Raises:\n            DeviceConnectionError: if any error occurs when connecting the device\n            AdbError: if any other adb error occurs\n    \n        Returns:\n            command(s) standard output (stdout)\n    \n        \"\"\"\n        proc = self.start_cmd(cmds, device)\n        if timeout:\n            stdout, stderr = proc_communicate_timeout(proc, timeout)\n        else:\n            stdout, stderr = proc.communicate()\n    \n        if ensure_unicode:\n            stdout = stdout.decode(get_std_encoding(sys.stdout))\n            stderr = stderr.decode(get_std_encoding(sys.stderr))\n    \n        if proc.returncode > 0:\n            # adb connection error\n            pattern = DeviceConnectionError.DEVICE_CONNECTION_ERROR\n            if isinstance(stderr, binary_type):\n                pattern = pattern.encode(\"utf-8\")\n            if re.search(pattern, stderr):\n                raise DeviceConnectionError(stderr)\n            else:\n>               raise AdbError(stdout, stderr)\nE               airtest.core.error.AdbError: stdout[b'  bash arg: -p\\r\\n  bash arg: hongao.xuweimonitor\\r\\n  bash arg: -c\\r\\n  bash arg: android.intent.category.LAUNCHER\\r\\n  bash arg: 1\\r\\n** No activities found to run, monkey aborted.\\r\\n'] stderr[b'args: [-p, hongao.xuweimonitor, -c, android.intent.category.LAUNCHER, 1]\\r\\n arg: \"-p\"\\r\\n arg: \"hongao.xuweimonitor\"\\r\\n arg: \"-c\"\\r\\n arg: \"android.intent.category.LAUNCHER\"\\r\\n arg: \"1\"\\r\\ndata=\"hongao.xuweimonitor\"\\r\\ndata=\"android.intent.category.LAUNCHER\"\\r\\n']\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:194: AdbError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 小程序自动化疏通测试-Android\")\n    def test_Android():\n>       startApp()\n\ntest_flow\\test_Authentication\\test_jenkinsDebug.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nandroidBaseFlow.py:21: in startApp\n    start_app(\"hongao.xuweimonitor\")\nD:\\python\\lib\\site-packages\\airtest\\utils\\logwraper.py:71: in wrapper\n    res = f(*args, **kwargs)\nD:\\python\\lib\\site-packages\\airtest\\core\\api.py:150: in start_app\n    G.DEVICE.start_app(package, activity)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\android.py:157: in start_app\n    return self.adb.start_app(package, activity)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:1212: in start_app\n    self.shell(['monkey', '-p', package, '-c', 'android.intent.category.LAUNCHER', '1'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.adb.ADB object at 0x000001F9FF858A58>\ncmd = ['monkey', '-p', 'hongao.xuweimonitor', '-c', 'android.intent.category.LAUNCHER', '1']\n\n    def shell(self, cmd):\n        \"\"\"\n        Run the `adb shell` command on the device\n    \n        Args:\n            cmd: a command to be run\n    \n        Raises:\n            AdbShellError: if command return value is non-zero or if any other `AdbError` occurred\n    \n        Returns:\n            command output\n    \n        \"\"\"\n        if self.sdk_version < SDK_VERISON_ANDROID7:\n            # for sdk_version < 25, adb shell do not raise error\n            # https://stackoverflow.com/questions/9379400/adb-error-codes\n            cmd = split_cmd(cmd) + [\";\", \"echo\", \"---$?---\"]\n            out = self.raw_shell(cmd).rstrip()\n            m = re.match(\"(.*)---(\\d+)---$\", out, re.DOTALL)\n            if not m:\n                warnings.warn(\"return code not matched\")\n                stdout = out\n                returncode = 0\n            else:\n                stdout = m.group(1)\n                returncode = int(m.group(2))\n            if returncode > 0:\n                raise AdbShellError(\"\", stdout)\n            return stdout\n        else:\n            try:\n                out = self.raw_shell(cmd)\n            except AdbError as err:\n>               raise AdbShellError(err.stdout, err.stderr)\nE               airtest.core.error.AdbShellError: stdout[b'  bash arg: -p\\r\\n  bash arg: hongao.xuweimonitor\\r\\n  bash arg: -c\\r\\n  bash arg: android.intent.category.LAUNCHER\\r\\n  bash arg: 1\\r\\n** No activities found to run, monkey aborted.\\r\\n'] stderr[b'args: [-p, hongao.xuweimonitor, -c, android.intent.category.LAUNCHER, 1]\\r\\n arg: \"-p\"\\r\\n arg: \"hongao.xuweimonitor\"\\r\\n arg: \"-c\"\\r\\n arg: \"android.intent.category.LAUNCHER\"\\r\\n arg: \"1\"\\r\\ndata=\"hongao.xuweimonitor\"\\r\\ndata=\"android.intent.category.LAUNCHER\"\\r\\n']\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\adb.py:373: AdbShellError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "55c9d4ff42ce4aa9",
      "name" : "log",
      "source" : "55c9d4ff42ce4aa9.txt",
      "type" : "text/plain",
      "size" : 206
    }, {
      "uid" : "b3ff7e20b2734cd5",
      "name" : "stderr",
      "source" : "b3ff7e20b2734cd5.txt",
      "type" : "text/plain",
      "size" : 206
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_jenkinsDebug"
  }, {
    "name" : "host",
    "value" : "BF-202011271053"
  }, {
    "name" : "thread",
    "value" : "12516-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_jenkinsDebug"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "e41ba56ac0686ff9.json",
  "parameterValues" : [ ]
}
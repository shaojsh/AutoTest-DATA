{
  "uid" : "50199ea2300bc5a8",
  "name" : "test_infoReg",
  "fullName" : "test_flow.test_Authentication.test_personalInfoReg#test_infoReg",
  "historyId" : "28dda5313ff182aeade3becf47df4372",
  "time" : {
    "start" : 1604538879160,
    "stop" : 1604538920825,
    "duration" : 41665
  },
  "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            # 对个人信息企业信息进行删除操作\n            deletePerInforAndComInfor()\n            logger.info(\"对个人信息企业信息进行删除操作\")\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_forward)\n    \n            # 登陆页面\n            login(driver)\n    \n            waitUntilDisplay(driver, loginOn.link_home_css.value)\n            sleep(1)\n            homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n            test_Assert.assert_text_ui(homeText.text, '首页')\n            logger.info(\"进入登陆页面\")\n    \n            # waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n            # sleep(1)\n            # titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n            # test_Assert.assert_text_ui(titleText.text, '实名认证')\n            # logger.info(\"实名认证画面成功显示\")\n            name = yamldict['test_personalInfoRegList']['name']\n            idNum = yamldict['test_personalInfoRegList']['id_card']\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n            # BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n            # flushDb()\n            # driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n            #\n            # while 1:\n            #     message = getPhoneMessage().get(\"auMes\")\n            #     if message is None:\n            #         sleep(0.5)\n            #         continue\n            #     else:\n            #         break\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n            #     message.strip().strip('\"'))\n>           BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\BaseFunction.py:31: in waitUntilClick\n    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3bd015d8196156731fe7752657a3f36c\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x0000020CEBDEE5C0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            # 对个人信息企业信息进行删除操作\n            deletePerInforAndComInfor()\n            logger.info(\"对个人信息企业信息进行删除操作\")\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_forward)\n    \n            # 登陆页面\n            login(driver)\n    \n            waitUntilDisplay(driver, loginOn.link_home_css.value)\n            sleep(1)\n            homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n            test_Assert.assert_text_ui(homeText.text, '首页')\n            logger.info(\"进入登陆页面\")\n    \n            # waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n            # sleep(1)\n            # titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n            # test_Assert.assert_text_ui(titleText.text, '实名认证')\n            # logger.info(\"实名认证画面成功显示\")\n            name = yamldict['test_personalInfoRegList']['name']\n            idNum = yamldict['test_personalInfoRegList']['id_card']\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n            # BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n            # flushDb()\n            # driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n            #\n            # while 1:\n            #     message = getPhoneMessage().get(\"auMes\")\n            #     if message is None:\n            #         sleep(0.5)\n            #         continue\n            #     else:\n            #         break\n            # driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n            #     message.strip().strip('\"'))\n>           BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\BaseFunction.py:31: in waitUntilClick\n    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3bd015d8196156731fe7752657a3f36c\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x0000020CEBDEE5C0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b706a112b3ffe5fd",
      "name" : "log",
      "source" : "b706a112b3ffe5fd.txt",
      "type" : "text/plain",
      "size" : 367
    }, {
      "uid" : "4ef8c684c0dd2b81",
      "name" : "stdout",
      "source" : "4ef8c684c0dd2b81.txt",
      "type" : "text/plain",
      "size" : 247
    }, {
      "uid" : "16e8c605b70d939c",
      "name" : "stderr",
      "source" : "16e8c605b70d939c.txt",
      "type" : "text/plain",
      "size" : 548
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=2)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_personalInfoReg"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "11052-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_personalInfoReg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "个人实名认证 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/personal/set/certification",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=2)" ]
  },
  "source" : "50199ea2300bc5a8.json",
  "parameterValues" : [ ]
}
{
  "uid" : "9fb37f2e7d9afe96",
  "name" : "test_loginOn",
  "fullName" : "test_flow.text_demo.test_uidemo#test_loginOn",
  "historyId" : "8106da1260c84ffc1c35190ec50b1cd8",
  "time" : {
    "start" : 1596508201463,
    "stop" : 1596508206051,
    "duration" : 4588
  },
  "description" : "测试 http://10.10.128.152:10053/ loginOn",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/ loginOn</p>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: Object of type loginOn is not JSON serializable",
  "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/ loginOn\")\n    @allure.testcase(\"http://10.10.128.152:10053/\", \"loginOn \uD83D\uDC47\")\n    def test_loginOn():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        WebDriver.maximize_window()\n        WebDriver.get(\"http://10.10.128.152:10052/account/login?v=1596002392301\")\n        test_Assert.assert_text_ui('sucess', 'sucess')\n>       element = WebDriver.find_element_by_css_selector(loginOn.act_xpath)\n\ntest_flow\\text_demo\\test_uidemo.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:598: in find_element_by_css_selector\n    return self.find_element(by=By.CSS_SELECTOR, value=css_selector)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:319: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:372: in execute\n    data = utils.dump_json(params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\utils.py:33: in dump_json\n    return json.dumps(json_struct)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001BA5213AD00>\no = <loginOn.act_xpath: '#userName'>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type loginOn is not JSON serializable\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:179: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/ loginOn",
    "status" : "broken",
    "statusMessage" : "TypeError: Object of type loginOn is not JSON serializable",
    "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/ loginOn\")\n    @allure.testcase(\"http://10.10.128.152:10053/\", \"loginOn \uD83D\uDC47\")\n    def test_loginOn():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        WebDriver.maximize_window()\n        WebDriver.get(\"http://10.10.128.152:10052/account/login?v=1596002392301\")\n        test_Assert.assert_text_ui('sucess', 'sucess')\n>       element = WebDriver.find_element_by_css_selector(loginOn.act_xpath)\n\ntest_flow\\text_demo\\test_uidemo.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:598: in find_element_by_css_selector\n    return self.find_element(by=By.CSS_SELECTOR, value=css_selector)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:319: in execute\n    response = self.command_executor.execute(driver_command, params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:372: in execute\n    data = utils.dump_json(params)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\utils.py:33: in dump_json\n    return json.dumps(json_struct)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001BA5213AD00>\no = <loginOn.act_xpath: '#userName'>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type loginOn is not JSON serializable\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\json\\encoder.py:179: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "728c3f763e2d05fc",
      "name" : "log",
      "source" : "728c3f763e2d05fc.txt",
      "type" : "text/plain",
      "size" : 191
    }, {
      "uid" : "e1b4583a634789b0",
      "name" : "stderr",
      "source" : "e1b4583a634789b0.txt",
      "type" : "text/plain",
      "size" : 282
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.text_demo"
  }, {
    "name" : "suite",
    "value" : "test_uidemo"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "10520-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.text_demo.test_uidemo"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "loginOn \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "9fb37f2e7d9afe96.json",
  "parameterValues" : [ ]
}
{
  "uid" : "708e453dd7f1ecd6",
  "name" : "test_infoReg",
  "fullName" : "test_flow.test_Authentication.test_personalInfoReg#test_infoReg",
  "historyId" : "28dda5313ff182aeade3becf47df4372",
  "time" : {
    "start" : 1602817791098,
    "stop" : 1602817805595,
    "duration" : 14497
  },
  "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证</p>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: getVerification() takes 0 positional arguments but 2 were given",
  "statusTrace" : "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            # 对个人信息企业信息进行删除操作\n            deletePerInforAndComInfor()\n            logger.info(\"对个人信息企业信息进行删除操作\")\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_forward)\n    \n            # 登陆页面\n            login(driver)\n    \n            waitUntilDisplay(driver, loginOn.link_home_css.value)\n            sleep(1)\n            homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n            test_Assert.assert_text_ui(homeText.text, '首页')\n            logger.info(\"进入登陆页面\")\n    \n            waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n            sleep(1)\n            titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n            test_Assert.assert_text_ui(titleText.text, '实名认证')\n            logger.info(\"实名认证画面成功显示\")\n            name = yamldict['test_personalInfoRegList']['name']\n            idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n            driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n            driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n            BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n            flushDb()\n            driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"auMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n            driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n                message.strip().strip('\"'))\n    \n            picture_dir = os.getcwd()\n            pcture_dirOne = '\\\\test_data\\\\picture\\\\id_1.jpg'\n            pcture_dirTwo = '\\\\test_data\\\\picture\\\\id_2.jpg'\n            driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture1_css.value).send_keys(\n                picture_dir + pcture_dirOne)\n            BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture1_css.value)\n            driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture2_css.value).send_keys(\n                picture_dir + pcture_dirTwo)\n            BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture2_css.value)\n            waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n            sleep(1)\n            driver.find_element_by_css_selector(path_personalInfoReg.btn_aut_css.value).click()\n    \n>           getVerification(RequestURL, act)\nE           TypeError: getVerification() takes 0 positional arguments but 2 were given\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:91: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
    "status" : "broken",
    "statusMessage" : "TypeError: getVerification() takes 0 positional arguments but 2 were given",
    "statusTrace" : "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            # 对个人信息企业信息进行删除操作\n            deletePerInforAndComInfor()\n            logger.info(\"对个人信息企业信息进行删除操作\")\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_forward)\n    \n            # 登陆页面\n            login(driver)\n    \n            waitUntilDisplay(driver, loginOn.link_home_css.value)\n            sleep(1)\n            homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n            test_Assert.assert_text_ui(homeText.text, '首页')\n            logger.info(\"进入登陆页面\")\n    \n            waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n            sleep(1)\n            titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n            test_Assert.assert_text_ui(titleText.text, '实名认证')\n            logger.info(\"实名认证画面成功显示\")\n            name = yamldict['test_personalInfoRegList']['name']\n            idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n            driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n            driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n            BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n            flushDb()\n            driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"auMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n            driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n                message.strip().strip('\"'))\n    \n            picture_dir = os.getcwd()\n            pcture_dirOne = '\\\\test_data\\\\picture\\\\id_1.jpg'\n            pcture_dirTwo = '\\\\test_data\\\\picture\\\\id_2.jpg'\n            driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture1_css.value).send_keys(\n                picture_dir + pcture_dirOne)\n            BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture1_css.value)\n            driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture2_css.value).send_keys(\n                picture_dir + pcture_dirTwo)\n            BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture2_css.value)\n            waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n            sleep(1)\n            driver.find_element_by_css_selector(path_personalInfoReg.btn_aut_css.value).click()\n    \n>           getVerification(RequestURL, act)\nE           TypeError: getVerification() takes 0 positional arguments but 2 were given\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:91: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "a7d1dc0dc6c01c3",
      "name" : "log",
      "source" : "a7d1dc0dc6c01c3.txt",
      "type" : "text/plain",
      "size" : 576
    }, {
      "uid" : "99f5ddaca0d742d5",
      "name" : "stdout",
      "source" : "99f5ddaca0d742d5.txt",
      "type" : "text/plain",
      "size" : 386
    }, {
      "uid" : "10582e99258cde4c",
      "name" : "stderr",
      "source" : "10582e99258cde4c.txt",
      "type" : "text/plain",
      "size" : 847
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=2)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_personalInfoReg"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "2312-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_personalInfoReg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "个人实名认证 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/personal/set/certification",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=2)" ]
  },
  "source" : "708e453dd7f1ecd6.json",
  "parameterValues" : [ ]
}
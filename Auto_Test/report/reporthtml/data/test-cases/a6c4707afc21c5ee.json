{
  "uid" : "a6c4707afc21c5ee",
  "name" : "test_infoReg",
  "fullName" : "test_flow.test_Authentication.test_personalInfoReg#test_infoReg",
  "historyId" : "28dda5313ff182aeade3becf47df4372",
  "time" : {
    "start" : 1596761310597,
    "stop" : 1596761321746,
    "duration" : 11149
  },
  "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证</p>\n",
  "status" : "broken",
  "statusMessage" : "AttributeError: input_phoneNum_css",
  "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(\"http://10.10.128.152:10053/user/login\")\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n    \n        name = yamldict['test_personalInfoRegList']['name']\n        idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n        driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n        driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n        BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n        driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n    \n        message = getPhoneMessage().get(\"auMes\")\n>       driver.find_element_by_css_selector(loginOn.input_phoneNum_css.value).send_keys(message.strip().strip('\"'))\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <enum 'loginOn'>, name = 'input_phoneNum_css'\n\n    def __getattr__(cls, name):\n        \"\"\"Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n    \n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: input_phoneNum_css\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\enum.py:341: AttributeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
    "status" : "broken",
    "statusMessage" : "AttributeError: input_phoneNum_css",
    "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(\"http://10.10.128.152:10053/user/login\")\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n    \n        name = yamldict['test_personalInfoRegList']['name']\n        idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n        driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n        driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n        BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n        driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n    \n        message = getPhoneMessage().get(\"auMes\")\n>       driver.find_element_by_css_selector(loginOn.input_phoneNum_css.value).send_keys(message.strip().strip('\"'))\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <enum 'loginOn'>, name = 'input_phoneNum_css'\n\n    def __getattr__(cls, name):\n        \"\"\"Return the enum member matching `name`\n    \n        We use __getattr__ instead of descriptors or inserting into the enum\n        class' __dict__ in order to support `name` and `value` being both\n        properties for enum members (which live in the class' __dict__) and\n        enum members themselves.\n    \n        \"\"\"\n        if _is_dunder(name):\n            raise AttributeError(name)\n        try:\n            return cls._member_map_[name]\n        except KeyError:\n>           raise AttributeError(name) from None\nE           AttributeError: input_phoneNum_css\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python38\\lib\\enum.py:341: AttributeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "b04dcf0011d26747",
      "name" : "log",
      "source" : "b04dcf0011d26747.txt",
      "type" : "text/plain",
      "size" : 584
    }, {
      "uid" : "4a20c94b37c43c51",
      "name" : "stdout",
      "source" : "4a20c94b37c43c51.txt",
      "type" : "text/plain",
      "size" : 407
    }, {
      "uid" : "581ab0574c628d9f",
      "name" : "stderr",
      "source" : "581ab0574c628d9f.txt",
      "type" : "text/plain",
      "size" : 855
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_personalInfoReg"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "6196-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_personalInfoReg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "个人实名认证 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/personal/set/certification",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "a6c4707afc21c5ee.json",
  "parameterValues" : [ ]
}
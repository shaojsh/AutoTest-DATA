{
  "uid" : "8ff5e3bafc6766b5",
  "name" : "test_Tripartite_interaction",
  "fullName" : "test_flow.test_Tripartite_interaction.test_Tripartite_interaction#test_Tripartite_interaction",
  "historyId" : "d91e7b4392163e0b46289a9f8b97b16c",
  "time" : {
    "start" : 1603331843019,
    "stop" : 1603331893425,
    "duration" : 50406
  },
  "description" : "测试 http://10.10.128.152:10052/#/account/login 三方（企业，银行，前端）交互",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10052/#/account/login 三方（企业，银行，前端）交互</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "@pytest.mark.run(order=-1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10052/#/account/login 三方（企业，银行，前端）交互\")\n    @allure.testcase(\"http://10.10.128.152:10052/#/account/login\", \"三方（企业，银行，前端）交互 \uD83D\uDC47\")\n    def test_Tripartite_interaction():\n        def_name = sys._getframe().f_code.co_name\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 前端账户授信申请\n        if runMode == 'UI':\n            driver_forward = webdriver.Chrome()\n            driver_forward.maximize_window()\n            driver_forward.get(url_forward)\n            logger.info('前端账户登录授信申请')\n            login(driver_forward)\n>           creditExtension(driver_forward)\n\ntest_flow\\test_Tripartite_interaction\\test_Tripartite_interaction.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_flow\\test_Tripartite_interaction\\test_Tripartite_interaction.py:318: in creditExtension\n    waitUntilClick(driver_forward, path_Tripartite_interaction.btn_back_css.value)\ncommon\\BaseFunction.py:31: in waitUntilClick\n    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"fa64f9a5af27dfdf4631c545bf772b80\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x00000271C6D24630>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10052/#/account/login 三方（企业，银行，前端）交互",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "@pytest.mark.run(order=-1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10052/#/account/login 三方（企业，银行，前端）交互\")\n    @allure.testcase(\"http://10.10.128.152:10052/#/account/login\", \"三方（企业，银行，前端）交互 \uD83D\uDC47\")\n    def test_Tripartite_interaction():\n        def_name = sys._getframe().f_code.co_name\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 前端账户授信申请\n        if runMode == 'UI':\n            driver_forward = webdriver.Chrome()\n            driver_forward.maximize_window()\n            driver_forward.get(url_forward)\n            logger.info('前端账户登录授信申请')\n            login(driver_forward)\n>           creditExtension(driver_forward)\n\ntest_flow\\test_Tripartite_interaction\\test_Tripartite_interaction.py:150: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_flow\\test_Tripartite_interaction\\test_Tripartite_interaction.py:318: in creditExtension\n    waitUntilClick(driver_forward, path_Tripartite_interaction.btn_back_css.value)\ncommon\\BaseFunction.py:31: in waitUntilClick\n    WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.CSS_SELECTOR, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"fa64f9a5af27dfdf4631c545bf772b80\")>\nmethod = <selenium.webdriver.support.expected_conditions.element_to_be_clickable object at 0x00000271C6D24630>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "be48d5539dfc9ee",
      "name" : "log",
      "source" : "be48d5539dfc9ee.txt",
      "type" : "text/plain",
      "size" : 920
    }, {
      "uid" : "28bf572eed0efda6",
      "name" : "stderr",
      "source" : "28bf572eed0efda6.txt",
      "type" : "text/plain",
      "size" : 1371
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : true,
    "stepsCount" : 0,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=-1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Tripartite_interaction"
  }, {
    "name" : "suite",
    "value" : "test_Tripartite_interaction"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "11288-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Tripartite_interaction.test_Tripartite_interaction"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "三方（企业，银行，前端）交互 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10052/#/account/login",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=-1)" ]
  },
  "source" : "8ff5e3bafc6766b5.json",
  "parameterValues" : [ ]
}
{
  "uid" : "2ac8092a4c7d3de0",
  "name" : "test_companyRegister",
  "fullName" : "test_flow.test_Authentication.test_login#test_companyRegister",
  "historyId" : "dd0646a5c1a798e47c4f25747509dea9",
  "time" : {
    "start" : 1602465511997,
    "stop" : 1602465532345,
    "duration" : 20348
  },
  "description" : "测试 http://10.10.128.152:10053/user/register 中小微企业注册流程",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/user/register 中小微企业注册流程</p>\n",
  "status" : "broken",
  "statusMessage" : "poco.exceptions.PocoTargetTimeout: Waiting timeout for appearance of \"UIObjectProxy of \"text=一键微信授权登录\"\"",
  "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/user/register 中小微企业注册流程\")\n    @allure.testcase(\"http://10.10.128.152:10053/user/register\", \"注册 \uD83D\uDC47\")\n    def test_companyRegister():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_ui_register)\n            # db中清除已注册的账户\n            deleteInforMobile()\n            logger.info(\"对已注册的账户进行删除操作\")\n            sleep(1)\n            waitUntilClick(driver, loginOn.btn_agree_css.value)\n            driver.find_element_by_css_selector(loginOn.btn_agree_css.value).click()\n    \n            waitUntilDisplay(driver, loginOn.input_act_css.value)\n            driver.find_element_by_css_selector(loginOn.input_act_css.value).send_keys(act)\n            driver.find_element_by_css_selector(loginOn.input_pwd_css.value).send_keys(pwd)\n            driver.find_element_by_css_selector(loginOn.input_conPwd_css.value).send_keys(pwd)\n            waitUntilClick(driver, loginOn.btn_phoneCode_css.value)\n            sleep(2)\n            flushDb()\n            driver.find_element_by_css_selector(loginOn.btn_phoneCode_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"regMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n    \n            driver.find_element_by_css_selector(loginOn.input_phoneCode_css.value).send_keys(message.strip().strip('\"'))\n            waitUntilClick(driver, loginOn.btn_agreeReg.value)\n            driver.find_element_by_css_selector(loginOn.btn_agreeReg.value).click()\n    \n            title = driver.title\n            test_Assert.assert_text_ui(title, '中小微企业金融服务聚合平台')\n            logger.info(\"注册成功，返回到登陆页面\")\n            sleep(1)\n            driver.quit()\n        else:\n            deleteInforMobile()  # 删除个人信息\n            startWeinxin()\n    \n            el1 = mobileDriver(text='一键微信授权登录')\n            # 等待元素出现\n>           el1.wait_for_appearance(timeout=10)\n\ntest_flow\\test_Authentication\\test_login.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = UIObjectProxy of \"text=一键微信授权登录\", timeout = 10\n\n    def wait_for_appearance(self, timeout=120):\n        \"\"\"\n        Block and wait until the UI element **appears** within the given timeout. When timeout, the\n        :py:class:`PocoTargetTimeout <poco.exceptions.PocoTargetTimeout>` is raised.\n    \n        Args:\n            timeout: maximum waiting time in seconds\n    \n        Raises:\n            PocoTargetTimeout: when timeout\n        \"\"\"\n    \n        start = time.time()\n        while not self.exists():\n            self.poco.sleep_for_polling_interval()\n            if time.time() - start > timeout:\n>               raise PocoTargetTimeout('appearance', self)\nE               poco.exceptions.PocoTargetTimeout: Waiting timeout for appearance of \"UIObjectProxy of \"text=一键微信授权登录\"\"\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\poco\\proxy.py:681: PocoTargetTimeout",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/user/register 中小微企业注册流程",
    "status" : "broken",
    "statusMessage" : "poco.exceptions.PocoTargetTimeout: Waiting timeout for appearance of \"UIObjectProxy of \"text=一键微信授权登录\"\"",
    "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/user/register 中小微企业注册流程\")\n    @allure.testcase(\"http://10.10.128.152:10053/user/register\", \"注册 \uD83D\uDC47\")\n    def test_companyRegister():\n        if runMode == 'UI':\n            def_name = sys._getframe().f_code.co_name\n            test_Assert = Assert.Assertions(def_name)\n            logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n            driver = webdriver.Chrome()\n            driver.maximize_window()\n            driver.get(url_ui_register)\n            # db中清除已注册的账户\n            deleteInforMobile()\n            logger.info(\"对已注册的账户进行删除操作\")\n            sleep(1)\n            waitUntilClick(driver, loginOn.btn_agree_css.value)\n            driver.find_element_by_css_selector(loginOn.btn_agree_css.value).click()\n    \n            waitUntilDisplay(driver, loginOn.input_act_css.value)\n            driver.find_element_by_css_selector(loginOn.input_act_css.value).send_keys(act)\n            driver.find_element_by_css_selector(loginOn.input_pwd_css.value).send_keys(pwd)\n            driver.find_element_by_css_selector(loginOn.input_conPwd_css.value).send_keys(pwd)\n            waitUntilClick(driver, loginOn.btn_phoneCode_css.value)\n            sleep(2)\n            flushDb()\n            driver.find_element_by_css_selector(loginOn.btn_phoneCode_css.value).click()\n    \n            while 1:\n                message = getPhoneMessage().get(\"regMes\")\n                if message is None:\n                    sleep(0.5)\n                    continue\n                else:\n                    break\n    \n            driver.find_element_by_css_selector(loginOn.input_phoneCode_css.value).send_keys(message.strip().strip('\"'))\n            waitUntilClick(driver, loginOn.btn_agreeReg.value)\n            driver.find_element_by_css_selector(loginOn.btn_agreeReg.value).click()\n    \n            title = driver.title\n            test_Assert.assert_text_ui(title, '中小微企业金融服务聚合平台')\n            logger.info(\"注册成功，返回到登陆页面\")\n            sleep(1)\n            driver.quit()\n        else:\n            deleteInforMobile()  # 删除个人信息\n            startWeinxin()\n    \n            el1 = mobileDriver(text='一键微信授权登录')\n            # 等待元素出现\n>           el1.wait_for_appearance(timeout=10)\n\ntest_flow\\test_Authentication\\test_login.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = UIObjectProxy of \"text=一键微信授权登录\", timeout = 10\n\n    def wait_for_appearance(self, timeout=120):\n        \"\"\"\n        Block and wait until the UI element **appears** within the given timeout. When timeout, the\n        :py:class:`PocoTargetTimeout <poco.exceptions.PocoTargetTimeout>` is raised.\n    \n        Args:\n            timeout: maximum waiting time in seconds\n    \n        Raises:\n            PocoTargetTimeout: when timeout\n        \"\"\"\n    \n        start = time.time()\n        while not self.exists():\n            self.poco.sleep_for_polling_interval()\n            if time.time() - start > timeout:\n>               raise PocoTargetTimeout('appearance', self)\nE               poco.exceptions.PocoTargetTimeout: Waiting timeout for appearance of \"UIObjectProxy of \"text=一键微信授权登录\"\"\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\poco\\proxy.py:681: PocoTargetTimeout",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "6cb50f470f590c0d",
      "name" : "log",
      "source" : "6cb50f470f590c0d.txt",
      "type" : "text/plain",
      "size" : 4189
    }, {
      "uid" : "66a80cecf66eec61",
      "name" : "stdout",
      "source" : "66a80cecf66eec61.txt",
      "type" : "text/plain",
      "size" : 27
    }, {
      "uid" : "8d36bbe7bf319c3c",
      "name" : "stderr",
      "source" : "8d36bbe7bf319c3c.txt",
      "type" : "text/plain",
      "size" : 4173
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "9032-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "注册 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/user/register",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "2ac8092a4c7d3de0.json",
  "parameterValues" : [ ]
}
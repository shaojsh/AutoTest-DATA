{
  "uid" : "5133500a7e839374",
  "name" : "test_infoReg",
  "fullName" : "test_flow.test_Authentication.test_personalInfoReg#test_infoReg",
  "historyId" : "28dda5313ff182aeade3becf47df4372",
  "time" : {
    "start" : 1596694703132,
    "stop" : 1596694703136,
    "duration" : 4
  },
  "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证</p>\n",
  "status" : "broken",
  "statusMessage" : "TypeError: Sqldata() takes 2 positional arguments but 3 were given",
  "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n>       deleteAct()\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def deleteAct():\n        act = yamldict['test_userlist']['company_user']\n        sqlStr1 = yamldict['test_db_sqllist']['sql0000001']\n        sqlStr2 = yamldict['test_db_sqllist']['sql0000002']\n        sqlStr3 = yamldict['test_db_sqllist']['sql0000003']\n    \n        sqlStr2 = sqlStr2.format(\"'\" + act + \"'\")\n        sqlStr3 = sqlStr3.format(\"'\" + act + \"'\")\n    \n        print(sqlStr1)\n        print(sqlStr2.format(\"'\" + act + \"'\"))\n        print(sqlStr3.format(\"'\" + act + \"'\"))\n    \n>       Sqldata(sqlStr1, 'select', 1)\nE       TypeError: Sqldata() takes 2 positional arguments but 3 were given\n\ncommon\\dbLink.py:50: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
    "status" : "broken",
    "statusMessage" : "TypeError: Sqldata() takes 2 positional arguments but 3 were given",
    "statusTrace" : "@pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n>       deleteAct()\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n    def deleteAct():\n        act = yamldict['test_userlist']['company_user']\n        sqlStr1 = yamldict['test_db_sqllist']['sql0000001']\n        sqlStr2 = yamldict['test_db_sqllist']['sql0000002']\n        sqlStr3 = yamldict['test_db_sqllist']['sql0000003']\n    \n        sqlStr2 = sqlStr2.format(\"'\" + act + \"'\")\n        sqlStr3 = sqlStr3.format(\"'\" + act + \"'\")\n    \n        print(sqlStr1)\n        print(sqlStr2.format(\"'\" + act + \"'\"))\n        print(sqlStr3.format(\"'\" + act + \"'\"))\n    \n>       Sqldata(sqlStr1, 'select', 1)\nE       TypeError: Sqldata() takes 2 positional arguments but 3 were given\n\ncommon\\dbLink.py:50: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "4ba47b8894517e11",
      "name" : "log",
      "source" : "4ba47b8894517e11.txt",
      "type" : "text/plain",
      "size" : 85
    }, {
      "uid" : "b729b5b4872d68a6",
      "name" : "stdout",
      "source" : "b729b5b4872d68a6.txt",
      "type" : "text/plain",
      "size" : 180
    }, {
      "uid" : "c75c44d6de395184",
      "name" : "stderr",
      "source" : "c75c44d6de395184.txt",
      "type" : "text/plain",
      "size" : 132
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_personalInfoReg"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "13832-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_personalInfoReg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "个人实名认证 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/personal/set/certification",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "5133500a7e839374.json",
  "parameterValues" : [ ]
}
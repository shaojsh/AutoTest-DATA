{
  "uid" : "821feb95c3b2f5e9",
  "name" : "test_infoReg",
  "fullName" : "test_flow.test_Authentication.test_personalInfoReg#test_infoReg",
  "historyId" : "28dda5313ff182aeade3becf47df4372",
  "time" : {
    "start" : 1600159421751,
    "stop" : 1600159485131,
    "duration" : 63380
  },
  "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证</p>\n",
  "status" : "broken",
  "statusMessage" : "  File \"<string>\", line 1\n    {\"@class\":\"com.bird.web.sso.ticket.ServerTicket\",\"userId\":\"0kf3pnsfd-0174-748fb578-8a8a0018-020f\",\"tenantId\":\"chengtay-tech\",\"userName\":\"17621198955\",\"realName\": ,\"creationTime\":[\"java.util.Date\",1600159530358],\"lastRefreshTime\":[\"java.util.Date\",1600159530358],\"expireTime\":[\"java.util.Date\",1600181130358],\"appClaims\":{\"@class\":\"java.util.HashMap\"}}\n                                                                                                                                                                      ^\nSyntaxError: invalid syntax",
  "statusTrace" : "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        sleep(1)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        sleep(1)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n>       getVerification(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17621198955'\n\n    def getVerification(url, act):\n        r = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n        print('token为：' + data)\n    \n        r = RedisSqldata()\n        keys = r.keys()\n        pipe = r.pipeline()\n        pipe_size = 100000\n        len = 0\n        key_list = []\n        print(r.pipeline())\n    \n        for key in keys:\n            key_list.append(key)\n            pipe.get(key)\n            if len < pipe_size:\n                len += 1\n            else:\n                for (k, v) in zip(key_list, pipe.execute()):\n                    len = 0\n                    key_list = []\n    \n        for (k, v) in zip(key_list, pipe.execute()):\n            k = bytes.decode(k)\n            v = bytes.decode(v)\n            if k == 'token:' + data:\n                print(v)\n>               dic = eval(v.replace('null', ' '))\nE                 File \"<string>\", line 1\nE                   {\"@class\":\"com.bird.web.sso.ticket.ServerTicket\",\"userId\":\"0kf3pnsfd-0174-748fb578-8a8a0018-020f\",\"tenantId\":\"chengtay-tech\",\"userName\":\"17621198955\",\"realName\": ,\"creationTime\":[\"java.util.Date\",1600159530358],\"lastRefreshTime\":[\"java.util.Date\",1600159530358],\"expireTime\":[\"java.util.Date\",1600181130358],\"appClaims\":{\"@class\":\"java.util.HashMap\"}}\nE                                                                                                                                                                                     ^\nE               SyntaxError: invalid syntax\n\ncommon\\dbLink.py:202: SyntaxError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
    "status" : "broken",
    "statusMessage" : "  File \"<string>\", line 1\n    {\"@class\":\"com.bird.web.sso.ticket.ServerTicket\",\"userId\":\"0kf3pnsfd-0174-748fb578-8a8a0018-020f\",\"tenantId\":\"chengtay-tech\",\"userName\":\"17621198955\",\"realName\": ,\"creationTime\":[\"java.util.Date\",1600159530358],\"lastRefreshTime\":[\"java.util.Date\",1600159530358],\"expireTime\":[\"java.util.Date\",1600181130358],\"appClaims\":{\"@class\":\"java.util.HashMap\"}}\n                                                                                                                                                                      ^\nSyntaxError: invalid syntax",
    "statusTrace" : "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        sleep(1)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        sleep(1)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n>       getVerification(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:58: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17621198955'\n\n    def getVerification(url, act):\n        r = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n        print('token为：' + data)\n    \n        r = RedisSqldata()\n        keys = r.keys()\n        pipe = r.pipeline()\n        pipe_size = 100000\n        len = 0\n        key_list = []\n        print(r.pipeline())\n    \n        for key in keys:\n            key_list.append(key)\n            pipe.get(key)\n            if len < pipe_size:\n                len += 1\n            else:\n                for (k, v) in zip(key_list, pipe.execute()):\n                    len = 0\n                    key_list = []\n    \n        for (k, v) in zip(key_list, pipe.execute()):\n            k = bytes.decode(k)\n            v = bytes.decode(v)\n            if k == 'token:' + data:\n                print(v)\n>               dic = eval(v.replace('null', ' '))\nE                 File \"<string>\", line 1\nE                   {\"@class\":\"com.bird.web.sso.ticket.ServerTicket\",\"userId\":\"0kf3pnsfd-0174-748fb578-8a8a0018-020f\",\"tenantId\":\"chengtay-tech\",\"userName\":\"17621198955\",\"realName\": ,\"creationTime\":[\"java.util.Date\",1600159530358],\"lastRefreshTime\":[\"java.util.Date\",1600159530358],\"expireTime\":[\"java.util.Date\",1600181130358],\"appClaims\":{\"@class\":\"java.util.HashMap\"}}\nE                                                                                                                                                                                     ^\nE               SyntaxError: invalid syntax\n\ncommon\\dbLink.py:202: SyntaxError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "642dd01e4cb3e487",
      "name" : "log",
      "source" : "642dd01e4cb3e487.txt",
      "type" : "text/plain",
      "size" : 584
    }, {
      "uid" : "f76cb0e2228ca56c",
      "name" : "stdout",
      "source" : "f76cb0e2228ca56c.txt",
      "type" : "text/plain",
      "size" : 723
    }, {
      "uid" : "4efa42c5da6446fa",
      "name" : "stderr",
      "source" : "4efa42c5da6446fa.txt",
      "type" : "text/plain",
      "size" : 855
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 3
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=2)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_personalInfoReg"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "12444-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_personalInfoReg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "个人实名认证 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/personal/set/certification",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=2)" ]
  },
  "source" : "821feb95c3b2f5e9.json",
  "parameterValues" : [ ]
}
{
  "uid" : "579ed91ee9bc36f0",
  "name" : "test_businessInforReg",
  "fullName" : "test_flow.test_Authentication.test_businessInfoReg#test_businessInforReg",
  "historyId" : "673c6cf796d54f5cbc2e9852ef4f69c7",
  "time" : {
    "start" : 1600676566282,
    "stop" : 1600676607734,
    "duration" : 41452
  },
  "description" : "测试 http://10.10.128.152:10053/personal/baseinfo 企业认证",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/personal/baseinfo 企业认证</p>\n",
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "@pytest.mark.run(order=3)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/baseinfo 企业认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/baseinfo\", \"企业认证 \uD83D\uDC47\")\n    def test_businessInforReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # 登陆页面\n        login(driver)\n        waitUntilDisplay(driver, path_businessInfoReg.txt_aut_css.value)\n        txt_auTitle = driver.find_element_by_css_selector(path_businessInfoReg.txt_aut_css.value).text\n        test_Assert.assert_text_ui(txt_auTitle, '企业基本资料')\n        logger.info(\"企业基本资料画面正常显示\")\n    \n        # 企业证件\n        el = driver.find_element_by_css_selector(path_businessInfoReg.input_companyName_css.value)\n        el.send_keys(businessName)\n>       waitUntilDisplay_xpath(driver, path_businessInfoReg.display_name_xpath.value)\n\ntest_flow\\test_Authentication\\test_businessInfoReg.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\BaseFunction.py:19: in waitUntilDisplay_xpath\n    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"dd2f1ada97d9cb4a875d5d685435686d\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000029B232BB8D0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/personal/baseinfo 企业认证",
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
    "statusTrace" : "@pytest.mark.run(order=3)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/baseinfo 企业认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/baseinfo\", \"企业认证 \uD83D\uDC47\")\n    def test_businessInforReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # 登陆页面\n        login(driver)\n        waitUntilDisplay(driver, path_businessInfoReg.txt_aut_css.value)\n        txt_auTitle = driver.find_element_by_css_selector(path_businessInfoReg.txt_aut_css.value).text\n        test_Assert.assert_text_ui(txt_auTitle, '企业基本资料')\n        logger.info(\"企业基本资料画面正常显示\")\n    \n        # 企业证件\n        el = driver.find_element_by_css_selector(path_businessInfoReg.input_companyName_css.value)\n        el.send_keys(businessName)\n>       waitUntilDisplay_xpath(driver, path_businessInfoReg.display_name_xpath.value)\n\ntest_flow\\test_Authentication\\test_businessInfoReg.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncommon\\BaseFunction.py:19: in waitUntilDisplay_xpath\n    WebDriverWait(driver, 30).until(EC.visibility_of_element_located((By.XPATH, ByCss)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"dd2f1ada97d9cb4a875d5d685435686d\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x0000029B232BB8D0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "efed8cf7c25ff61",
      "name" : "log",
      "source" : "efed8cf7c25ff61.txt",
      "type" : "text/plain",
      "size" : 329
    }, {
      "uid" : "11776d2d62e17414",
      "name" : "stderr",
      "source" : "11776d2d62e17414.txt",
      "type" : "text/plain",
      "size" : 465
    } ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=3)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_businessInfoReg"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "7620-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_businessInfoReg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "企业认证 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/personal/baseinfo",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=3)" ]
  },
  "source" : "579ed91ee9bc36f0.json",
  "parameterValues" : [ ]
}
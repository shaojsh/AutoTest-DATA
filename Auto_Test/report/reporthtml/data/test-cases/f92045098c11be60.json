{
  "uid" : "f92045098c11be60",
  "name" : "test_Android",
  "fullName" : "test_flow.test_Authentication.test_jenkinsDebug#test_Android",
  "historyId" : "037f6ac01dca35d949e1d56271286eaa",
  "time" : {
    "start" : 1637546356962,
    "stop" : 1637546363606,
    "duration" : 6644
  },
  "description" : "测试 小程序自动化疏通测试-Android",
  "descriptionHtml" : "<p>测试 小程序自动化疏通测试-Android</p>\n",
  "status" : "broken",
  "statusMessage" : "OSError: socket connection broken",
  "statusTrace" : "inst = <airtest.core.android.minicap.Minicap object at 0x00000253B889B358>\nargs = (), kwargs = {}\n\n    @wraps(func)\n    def wrapper(inst, *args, **kwargs):\n        try:\n>           return func(inst, *args, **kwargs)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.minicap.Minicap object at 0x00000253B889B358>\n\n    @retry_when_socket_error\n    def get_frame_from_stream(self):\n        \"\"\"\n        Get one frame from minicap stream\n    \n        Returns:\n            frame\n    \n        \"\"\"\n        if self._update_rotation_event.is_set():\n            LOGGING.debug(\"do update rotation\")\n            self.teardown_stream()\n            self._update_rotation_event.clear()\n        if self.frame_gen is None:\n            self.frame_gen = self.get_stream()\n>       return six.next(self.frame_gen)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:358: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.minicap.Minicap object at 0x00000253B889B358>\nlazy = True\n\n    @on_method_ready('install_or_upgrade')\n    def _get_stream(self, lazy=True):\n        proc, nbsp, localport = self._setup_stream_server(lazy=lazy)\n        s = SafeSocket()\n        s.connect((self.adb.host, localport))\n        t = s.recv(24)\n        # minicap header\n        global_headers = struct.unpack(\"<2B5I2B\", t)\n        LOGGING.debug(global_headers)\n        # check quirk-bitflags, reference: https://github.com/openstf/minicap#quirk-bitflags\n        ori, self.quirk_flag = global_headers[-2:]\n    \n        if self.quirk_flag & 2 and ori in (1, 3):\n            # resetup\n            LOGGING.debug(\"quirk_flag found, going to resetup\")\n            stopping = True\n        else:\n            stopping = False\n        yield stopping\n    \n        while not stopping:\n            if lazy:\n                s.send(b\"1\")\n            # recv frame header, count frame_size\n            if self.RECVTIMEOUT is not None:\n                header = s.recv_with_timeout(4, self.RECVTIMEOUT)\n            else:\n                header = s.recv(4)\n            if header is None:\n                LOGGING.error(\"minicap header is None\")\n                # recv timeout, if not frame updated, maybe screen locked\n                stopping = yield None\n            else:\n                frame_size = struct.unpack(\"<I\", header)[0]\n>               frame_data = s.recv(frame_size)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.utils.safesocket.SafeSocket object at 0x00000253B8A4D128>\nsize = 145065273\n\n    def recv(self, size):\n        while len(self.buf) < size:\n            trunk = self.sock.recv(min(size-len(self.buf), 4096))\n            if trunk == b\"\":\n>               raise socket.error(\"socket connection broken\")\nE               OSError: socket connection broken\n\nD:\\python\\lib\\site-packages\\airtest\\utils\\safesocket.py:32: OSError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 小程序自动化疏通测试-Android\")\n    def test_Android():\n        startApp()\n        picture_dir = os.getcwd() + '\\\\test_data\\\\picture\\\\img.png'\n>       touch(Template(picture_dir))\n\ntest_flow\\test_Authentication\\test_jenkinsDebug.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python\\lib\\site-packages\\airtest\\utils\\logwraper.py:71: in wrapper\n    res = f(*args, **kwargs)\nD:\\python\\lib\\site-packages\\airtest\\core\\api.py:260: in touch\n    pos = loop_find(v, timeout=ST.FIND_TIMEOUT)\nD:\\python\\lib\\site-packages\\airtest\\utils\\logwraper.py:71: in wrapper\n    res = f(*args, **kwargs)\nD:\\python\\lib\\site-packages\\airtest\\core\\cv.py:59: in loop_find\n    screen = G.DEVICE.snapshot(filename=None, quality=ST.SNAPSHOT_QUALITY)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\android.py:256: in snapshot\n    screen = self.minicap.get_frame_from_stream()\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:27: in wrapper\n    return func(inst, *args, **kwargs)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:358: in get_frame_from_stream\n    return six.next(self.frame_gen)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:291: in _get_stream\n    frame_data = s.recv(frame_size)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.utils.safesocket.SafeSocket object at 0x00000253B8A615F8>\nsize = 1110566201\n\n    def recv(self, size):\n        while len(self.buf) < size:\n            trunk = self.sock.recv(min(size-len(self.buf), 4096))\n            if trunk == b\"\":\n>               raise socket.error(\"socket connection broken\")\nE               OSError: socket connection broken\n\nD:\\python\\lib\\site-packages\\airtest\\utils\\safesocket.py:32: OSError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1637546356896,
      "stop" : 1637546356961,
      "duration" : 65
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "测试 小程序自动化疏通测试-Android",
    "status" : "broken",
    "statusMessage" : "OSError: socket connection broken",
    "statusTrace" : "inst = <airtest.core.android.minicap.Minicap object at 0x00000253B889B358>\nargs = (), kwargs = {}\n\n    @wraps(func)\n    def wrapper(inst, *args, **kwargs):\n        try:\n>           return func(inst, *args, **kwargs)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.minicap.Minicap object at 0x00000253B889B358>\n\n    @retry_when_socket_error\n    def get_frame_from_stream(self):\n        \"\"\"\n        Get one frame from minicap stream\n    \n        Returns:\n            frame\n    \n        \"\"\"\n        if self._update_rotation_event.is_set():\n            LOGGING.debug(\"do update rotation\")\n            self.teardown_stream()\n            self._update_rotation_event.clear()\n        if self.frame_gen is None:\n            self.frame_gen = self.get_stream()\n>       return six.next(self.frame_gen)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:358: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.core.android.minicap.Minicap object at 0x00000253B889B358>\nlazy = True\n\n    @on_method_ready('install_or_upgrade')\n    def _get_stream(self, lazy=True):\n        proc, nbsp, localport = self._setup_stream_server(lazy=lazy)\n        s = SafeSocket()\n        s.connect((self.adb.host, localport))\n        t = s.recv(24)\n        # minicap header\n        global_headers = struct.unpack(\"<2B5I2B\", t)\n        LOGGING.debug(global_headers)\n        # check quirk-bitflags, reference: https://github.com/openstf/minicap#quirk-bitflags\n        ori, self.quirk_flag = global_headers[-2:]\n    \n        if self.quirk_flag & 2 and ori in (1, 3):\n            # resetup\n            LOGGING.debug(\"quirk_flag found, going to resetup\")\n            stopping = True\n        else:\n            stopping = False\n        yield stopping\n    \n        while not stopping:\n            if lazy:\n                s.send(b\"1\")\n            # recv frame header, count frame_size\n            if self.RECVTIMEOUT is not None:\n                header = s.recv_with_timeout(4, self.RECVTIMEOUT)\n            else:\n                header = s.recv(4)\n            if header is None:\n                LOGGING.error(\"minicap header is None\")\n                # recv timeout, if not frame updated, maybe screen locked\n                stopping = yield None\n            else:\n                frame_size = struct.unpack(\"<I\", header)[0]\n>               frame_data = s.recv(frame_size)\n\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.utils.safesocket.SafeSocket object at 0x00000253B8A4D128>\nsize = 145065273\n\n    def recv(self, size):\n        while len(self.buf) < size:\n            trunk = self.sock.recv(min(size-len(self.buf), 4096))\n            if trunk == b\"\":\n>               raise socket.error(\"socket connection broken\")\nE               OSError: socket connection broken\n\nD:\\python\\lib\\site-packages\\airtest\\utils\\safesocket.py:32: OSError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.run(order=1)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 小程序自动化疏通测试-Android\")\n    def test_Android():\n        startApp()\n        picture_dir = os.getcwd() + '\\\\test_data\\\\picture\\\\img.png'\n>       touch(Template(picture_dir))\n\ntest_flow\\test_Authentication\\test_jenkinsDebug.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nD:\\python\\lib\\site-packages\\airtest\\utils\\logwraper.py:71: in wrapper\n    res = f(*args, **kwargs)\nD:\\python\\lib\\site-packages\\airtest\\core\\api.py:260: in touch\n    pos = loop_find(v, timeout=ST.FIND_TIMEOUT)\nD:\\python\\lib\\site-packages\\airtest\\utils\\logwraper.py:71: in wrapper\n    res = f(*args, **kwargs)\nD:\\python\\lib\\site-packages\\airtest\\core\\cv.py:59: in loop_find\n    screen = G.DEVICE.snapshot(filename=None, quality=ST.SNAPSHOT_QUALITY)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\android.py:256: in snapshot\n    screen = self.minicap.get_frame_from_stream()\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:27: in wrapper\n    return func(inst, *args, **kwargs)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:358: in get_frame_from_stream\n    return six.next(self.frame_gen)\nD:\\python\\lib\\site-packages\\airtest\\core\\android\\minicap.py:291: in _get_stream\n    frame_data = s.recv(frame_size)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <airtest.utils.safesocket.SafeSocket object at 0x00000253B8A615F8>\nsize = 1110566201\n\n    def recv(self, size):\n        while len(self.buf) < size:\n            trunk = self.sock.recv(min(size-len(self.buf), 4096))\n            if trunk == b\"\":\n>               raise socket.error(\"socket connection broken\")\nE               OSError: socket connection broken\n\nD:\\python\\lib\\site-packages\\airtest\\utils\\safesocket.py:32: OSError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "87bb1668b539be71",
      "name" : "log",
      "source" : "87bb1668b539be71.txt",
      "type" : "text/plain",
      "size" : 7525
    }, {
      "uid" : "324bbfbef4c5902b",
      "name" : "stderr",
      "source" : "324bbfbef4c5902b.txt",
      "type" : "text/plain",
      "size" : 7460
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 2
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=1)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_jenkinsDebug"
  }, {
    "name" : "host",
    "value" : "BF-202011271053"
  }, {
    "name" : "thread",
    "value" : "1732-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_jenkinsDebug"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=1)" ]
  },
  "source" : "f92045098c11be60.json",
  "parameterValues" : [ ]
}
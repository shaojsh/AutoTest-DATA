{
  "uid" : "2df9992759e105dd",
  "name" : "test_infoReg",
  "fullName" : "test_flow.test_Authentication.test_personalInfoReg#test_infoReg",
  "historyId" : "28dda5313ff182aeade3becf47df4372",
  "time" : {
    "start" : 1600217639685,
    "stop" : 1600217674676,
    "duration" : 34991
  },
  "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
  "descriptionHtml" : "<p>测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证</p>\n",
  "status" : "broken",
  "statusMessage" : "AttributeError: 'Redis' object has no attribute 'content'",
  "statusTrace" : "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        sleep(1)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        sleep(1)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n        name = yamldict['test_personalInfoRegList']['name']\n        idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n        driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n        driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n        BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n        driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n    \n        while 1:\n            message = getPhoneMessage().get(\"auMes\")\n            if message is None:\n                sleep(0.5)\n                continue\n            else:\n                break\n        driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n            message.strip().strip('\"'))\n    \n        picture_dir = os.getcwd()\n        pcture_dirOne = '\\\\test_data\\\\picture\\\\id_1.jpg'\n        pcture_dirTwo = '\\\\test_data\\\\picture\\\\id_2.jpg'\n        driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture1_css.value).send_keys(\n            picture_dir + pcture_dirOne)\n        BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture1_css.value)\n        driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture2_css.value).send_keys(\n            picture_dir + pcture_dirTwo)\n        BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture2_css.value)\n        waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n        sleep(1)\n        driver.find_element_by_css_selector(path_personalInfoReg.btn_aut_css.value).click()\n    \n>       certification = getVerification(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17621198957'\n\n    def getVerification(url, act):\n        r = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n        print('token为：' + data)\n    \n        r = RedisSqldata()\n        keys = r.keys()\n        pipe = r.pipeline()\n        pipe_size = 100000\n        len = 0\n        key_list = []\n        print(r.pipeline())\n    \n        for key in keys:\n            key_list.append(key)\n            pipe.get(key)\n            if len < pipe_size:\n                len += 1\n            else:\n                for (k, v) in zip(key_list, pipe.execute()):\n                    len = 0\n                    key_list = []\n    \n        for (k, v) in zip(key_list, pipe.execute()):\n            k = bytes.decode(k)\n            v = bytes.decode(v)\n            if k == 'token:' + data:\n                v = v.replace('null', '\\\"' + 'ok' + '\\\"')\n                dic = eval(v)\n                userId = dic.get('userId')\n                print('userId为：' + userId)\n                break\n    \n        while 1:\n            value1 = r.get(str(userId))\n            if value1 is None:\n                continue\n            else:\n                break\n        strValue1 = bytes.decode(value1).replace('\"', \"\")\n    \n        url_fin = 'http://sit.free.vipnps.vip/v1/certification/%s/callback'\n        url_fin = url_fin.replace('%s', strValue1)\n        RequestsHandler().post_Req(url=url_fin, json={\"msg\": 'q4o3qIRdHmQMmiECxSDEO8cOFdCngJCxluyefZ55scmFEcBSdgPbDxosxvUiGQbyP3XfOZ8cojLuDrVqWn/pvR2vJCxIxmCRbhMwe7ThciXRQpXF0O4blrizzkqx/9IqbYXYsQ6J0RrPKVJHEDgm2e6V8w2AWzMU00HUyclPXJAZU04QuX2rKLMAps3cg9WwXUUC+L6TokaSNmV8dRBKOYWx8J3TszXW3oOzLTmJFY/pSBOp3ObeG1N1+CnQnyc9mOkedroE9ZDx+1P7zKJ4qsI1jyYRJ1+2OxLBshbIqY4=',\n                                                      \"dgt\": 'MvXuUCz6PVUBb7xJhkJ6eU8QmPrgNL3lSgt5XQRiAsjdbeoQf3WapDlmHKIgr9Kj9wJFCw6ovl+5xd77xAtWynr8Xl+puaihAFhXN05DWEvBBv5Qjhm7gmzFdf1davKM/DMMWParIVusIDWJvKTyviSIuUsnIA50RFBuHcSC9KWXLioLEQht1L4BFR3F1M0/pFDnT2///VjM3PsvT/iFlDB82pXL4y+AA7EADE5aD5PrLG6ah57iNOrQUeJBmf8FCXXG8JoU/W/a3KqgOG0DwCi0fgSFWC7XuJXrTCJZBROi7LvLnWkvRaKk9LOHseUGAyuUJUENi5C3TbztDRfXSg=='}, )\n>       sting_response2 = r.content.decode()\nE       AttributeError: 'Redis' object has no attribute 'content'\n\ncommon\\dbLink.py:220: AttributeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证",
    "status" : "broken",
    "statusMessage" : "AttributeError: 'Redis' object has no attribute 'content'",
    "statusTrace" : "@pytest.mark.run(order=2)\n    @allure.severity(\"blocker\")\n    @allure.description(\"测试 http://10.10.128.152:10053/personal/set/certification 个人实名认证\")\n    @allure.testcase(\"http://10.10.128.152:10053/personal/set/certification\", \"个人实名认证 \uD83D\uDC47\")\n    def test_infoReg():\n        def_name = sys._getframe().f_code.co_name\n        test_Assert = Assert.Assertions(def_name)\n        logger.info(\"开始执行脚本%s:\\n\", def_name)\n    \n        # 对个人信息企业信息进行删除操作\n        deletePerInforAndComInfor()\n        logger.info(\"对个人信息企业信息进行删除操作\")\n    \n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.get(url_forward)\n    \n        # 登陆页面\n        login(driver)\n    \n        waitUntilDisplay(driver, loginOn.link_home_css.value)\n        sleep(1)\n        homeText = driver.find_element_by_css_selector(loginOn.link_home_css.value)\n    \n        test_Assert.assert_text_ui(homeText.text, '首页')\n        logger.info(\"进入登陆页面\")\n    \n        waitUntilDisplay(driver, path_personalInfoReg.txt_aut_css.value)\n        sleep(1)\n        titleText = driver.find_element_by_css_selector(path_personalInfoReg.txt_aut_css.value)\n        test_Assert.assert_text_ui(titleText.text, '实名认证')\n        logger.info(\"实名认证画面成功显示\")\n        name = yamldict['test_personalInfoRegList']['name']\n        idNum = yamldict['test_personalInfoRegList']['id_card']\n    \n        driver.find_element_by_css_selector(path_personalInfoReg.input_name_css.value).send_keys(name)\n        driver.find_element_by_css_selector(path_personalInfoReg.input_idNum_css.value).send_keys(idNum)\n        BaseFunction.waitUntilClick(driver, path_personalInfoReg.btn_phoneNum_css.value)\n        driver.find_element_by_css_selector(path_personalInfoReg.btn_phoneNum_css.value).click()\n    \n        while 1:\n            message = getPhoneMessage().get(\"auMes\")\n            if message is None:\n                sleep(0.5)\n                continue\n            else:\n                break\n        driver.find_element_by_css_selector(path_personalInfoReg.input_phoneNum_css.value).send_keys(\n            message.strip().strip('\"'))\n    \n        picture_dir = os.getcwd()\n        pcture_dirOne = '\\\\test_data\\\\picture\\\\id_1.jpg'\n        pcture_dirTwo = '\\\\test_data\\\\picture\\\\id_2.jpg'\n        driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture1_css.value).send_keys(\n            picture_dir + pcture_dirOne)\n        BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture1_css.value)\n        driver.find_element_by_css_selector(path_personalInfoReg.file_idPicture2_css.value).send_keys(\n            picture_dir + pcture_dirTwo)\n        BaseFunction.waitUntilDisplay(driver, path_personalInfoReg.btn_uplaodPicture2_css.value)\n        waitUntilClick(driver, path_personalInfoReg.btn_aut_css.value)\n        sleep(1)\n        driver.find_element_by_css_selector(path_personalInfoReg.btn_aut_css.value).click()\n    \n>       certification = getVerification(RequestURL, act)\n\ntest_flow\\test_Authentication\\test_personalInfoReg.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nurl = 'http://10.10.128.152:10000/v1/account/login', act = '17621198957'\n\n    def getVerification(url, act):\n        r = RequestsHandler().post_Req(url=url, json={\"userName\": str(act), \"password\": \"MTIzNDU2\"}, )\n        sting_response = r.content.decode()\n        json_response = dict_style(sting_response)\n        data = json_response.get('data')\n        print('token为：' + data)\n    \n        r = RedisSqldata()\n        keys = r.keys()\n        pipe = r.pipeline()\n        pipe_size = 100000\n        len = 0\n        key_list = []\n        print(r.pipeline())\n    \n        for key in keys:\n            key_list.append(key)\n            pipe.get(key)\n            if len < pipe_size:\n                len += 1\n            else:\n                for (k, v) in zip(key_list, pipe.execute()):\n                    len = 0\n                    key_list = []\n    \n        for (k, v) in zip(key_list, pipe.execute()):\n            k = bytes.decode(k)\n            v = bytes.decode(v)\n            if k == 'token:' + data:\n                v = v.replace('null', '\\\"' + 'ok' + '\\\"')\n                dic = eval(v)\n                userId = dic.get('userId')\n                print('userId为：' + userId)\n                break\n    \n        while 1:\n            value1 = r.get(str(userId))\n            if value1 is None:\n                continue\n            else:\n                break\n        strValue1 = bytes.decode(value1).replace('\"', \"\")\n    \n        url_fin = 'http://sit.free.vipnps.vip/v1/certification/%s/callback'\n        url_fin = url_fin.replace('%s', strValue1)\n        RequestsHandler().post_Req(url=url_fin, json={\"msg\": 'q4o3qIRdHmQMmiECxSDEO8cOFdCngJCxluyefZ55scmFEcBSdgPbDxosxvUiGQbyP3XfOZ8cojLuDrVqWn/pvR2vJCxIxmCRbhMwe7ThciXRQpXF0O4blrizzkqx/9IqbYXYsQ6J0RrPKVJHEDgm2e6V8w2AWzMU00HUyclPXJAZU04QuX2rKLMAps3cg9WwXUUC+L6TokaSNmV8dRBKOYWx8J3TszXW3oOzLTmJFY/pSBOp3ObeG1N1+CnQnyc9mOkedroE9ZDx+1P7zKJ4qsI1jyYRJ1+2OxLBshbIqY4=',\n                                                      \"dgt\": 'MvXuUCz6PVUBb7xJhkJ6eU8QmPrgNL3lSgt5XQRiAsjdbeoQf3WapDlmHKIgr9Kj9wJFCw6ovl+5xd77xAtWynr8Xl+puaihAFhXN05DWEvBBv5Qjhm7gmzFdf1davKM/DMMWParIVusIDWJvKTyviSIuUsnIA50RFBuHcSC9KWXLioLEQht1L4BFR3F1M0/pFDnT2///VjM3PsvT/iFlDB82pXL4y+AA7EADE5aD5PrLG6ah57iNOrQUeJBmf8FCXXG8JoU/W/a3KqgOG0DwCi0fgSFWC7XuJXrTCJZBROi7LvLnWkvRaKk9LOHseUGAyuUJUENi5C3TbztDRfXSg=='}, )\n>       sting_response2 = r.content.decode()\nE       AttributeError: 'Redis' object has no attribute 'content'\n\ncommon\\dbLink.py:220: AttributeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bfb83709bacac6f7",
      "name" : "log",
      "source" : "bfb83709bacac6f7.txt",
      "type" : "text/plain",
      "size" : 584
    }, {
      "uid" : "81bbfb5efbbe5357",
      "name" : "stdout",
      "source" : "81bbfb5efbbe5357.txt",
      "type" : "text/plain",
      "size" : 490
    }, {
      "uid" : "61a5c0a2d6f85a6a",
      "name" : "stderr",
      "source" : "61a5c0a2d6f85a6a.txt",
      "type" : "text/plain",
      "size" : 855
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "tag",
    "value" : "run(order=2)"
  }, {
    "name" : "parentSuite",
    "value" : "test_flow.test_Authentication"
  }, {
    "name" : "suite",
    "value" : "test_personalInfoReg"
  }, {
    "name" : "host",
    "value" : "A02-03-00033"
  }, {
    "name" : "thread",
    "value" : "1124-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_flow.test_Authentication.test_personalInfoReg"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "个人实名认证 \uD83D\uDC47",
    "url" : "http://10.10.128.152:10053/personal/set/certification",
    "type" : "test_case"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "run(order=2)" ]
  },
  "source" : "2df9992759e105dd.json",
  "parameterValues" : [ ]
}